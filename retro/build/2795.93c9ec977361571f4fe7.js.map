{"version":3,"file":"2795.93c9ec977361571f4fe7.js","mappings":"uqBAiBA,MAIMA,EAAmB,eAQnBC,EAA0B,uBAI1BC,EAAyB,sBAIzBC,EAA0B,4BACzB,IAAIC,GACX,SAAWA,GA8BPA,EAAcC,SAhBd,SAAkBC,EAAMC,EAAOC,GAC3B,IAAIC,GAAa,EACjB,KAAOH,GAAQA,EAAKI,eAAe,CAC/B,GAAIF,EAAWF,GAAO,EAClB,IAAAK,MAAKJ,GAAO,CAACK,EAAMC,KACf,GAAID,EAAKN,OAASA,EAEd,OADAG,EAAYI,GACL,KAGf,MAEJP,EAAOA,EAAKI,cAEhB,OAAOD,GA2BXL,EAAcU,iBAlBd,SAA0BF,EAAMG,GAC5B,IAAIC,EAeJ,OAZQA,EAFJJ,EACIA,EAAKK,aAAaX,KAAKY,SAASH,GACnB,QAERH,EAAKO,WAAWD,SAASH,GACjB,SAGA,OAIJ,UAEVC,GAiBXZ,EAAcgB,gBALd,SAAyBC,EAAOC,EAAOC,EAAOC,GAC1C,MAAMC,EAAKC,KAAKC,IAAIJ,EAAQF,GACtBO,EAAKF,KAAKC,IAAIH,EAAQF,GAC5B,OAAOG,GA1FQ,GA0FgBG,GA1FhB,GAmInBxB,EAAcyB,oBAhCd,SAA6BC,EAAYC,GACrC,MAAMC,EAAQD,EAAcE,OAC5B,IAAIC,EACJ,GAA8B,SAA1BJ,EAAWK,MAAMC,KAAiB,CAClC,MAAMC,EAAiBP,EAAWK,MAC7BE,eACLH,EAAe,IACXG,IACAH,EAAeG,EAAeC,iBAIlCJ,EAAe,GAEnB,MAAMK,EAAcT,EAAWK,MAAMK,MAAMC,KAAKC,MAAM,MAAM,GAAGC,MAAM,EAAG,IACxE,OAAIX,EAAQ,EACa,KAAjBE,EACO,EAAAU,WAAA,QAAmB,EAAAC,EAAA,IAAM,EAAAA,EAAA,IAAM,CAAEC,UAAW9C,GAAoB,EAAA6C,EAAA,KAAO,CAAEC,UAAW5C,GAA0B,IAAMgC,EAAe,MAAO,EAAAW,EAAA,KAAO,CAAEC,UAAW7C,GAA2BsC,IAAe,EAAAM,EAAA,IAAM,CAAEC,UAAW3C,GAA2B,MAGtP,EAAAyC,WAAA,QAAmB,EAAAC,EAAA,IAAM,EAAAA,EAAA,IAAM,CAAEC,UAAW9C,GAAoB,EAAA6C,EAAA,KAAO,CAAEC,UAAW5C,IAA2B,EAAA2C,EAAA,KAAO,CAAEC,UAAW7C,GAA2BsC,IAAe,EAAAM,EAAA,IAAM,CAAEC,UAAW3C,GAA2B,MAIjN,KAAjB+B,EACO,EAAAU,WAAA,QAAmB,EAAAC,EAAA,IAAM,EAAAA,EAAA,IAAM,CAAEC,UAAW,0CAAoD,EAAAD,EAAA,KAAO,CAAEC,UAAW5C,GAA0B,IAAMgC,EAAe,MAAO,EAAAW,EAAA,KAAO,CAAEC,UAAW7C,GAA2BsC,MAGzN,EAAAK,WAAA,QAAmB,EAAAC,EAAA,IAAM,EAAAA,EAAA,IAAM,CAAEC,UAAW,0CAAoD,EAAAD,EAAA,KAAO,CAAEC,UAAW5C,IAA2B,EAAA2C,EAAA,KAAO,CAAEC,UAAW7C,GAA2BsC,OAzGrN,CA8GGnC,IAAkBA,EAAgB,K,qCCtH9B,MAAM2C,UAAkB,EAAAC,YAI3BC,cACIC,QACAC,KAAKC,SA3BW,gBAgCpB,gBACI,OAAO,EAKXC,SAEI,OAAO,gBAAoB,MAAO,CAAEP,UApCd,qBAoCqCQ,QAASC,GAAKJ,KAAKK,YAAYD,MAM3F,MAAME,UAAuBV,EAIhCE,cACIC,QACAC,KAAKC,SA5CW,qBAiDpB,gBACI,IAAIM,EACJ,MAAM9C,EAA8B,QAAtB8C,EAAKP,KAAKQ,cAA2B,IAAPD,OAAgB,EAASA,EAAGC,OACxE,QAAI/C,GACOA,EAAKgD,YASpBJ,YAAYD,GACR,IAAIG,EACJ,MAAM9C,EAA8B,QAAtB8C,EAAKP,KAAKQ,cAA2B,IAAPD,OAAgB,EAASA,EAAGC,OACpE/C,IACAA,EAAKgD,aAAehD,EAAKgD,aAG7BT,KAAKU,UAMN,MAAMC,UAAwBf,EAIjCE,cACIC,QACAC,KAAKC,SA7EY,sBAkFrB,gBACI,IAAIM,EACJ,MAAM9C,EAA8B,QAAtB8C,EAAKP,KAAKQ,cAA2B,IAAPD,OAAgB,EAASA,EAAGC,OACxE,QAAI/C,GACOA,EAAKmD,aASpBP,YAAYD,GACR,IAAIG,EAAIM,EACR,MAAMpD,EAA8B,QAAtB8C,EAAKP,KAAKQ,cAA2B,IAAPD,OAAgB,EAASA,EAAGC,OACxE,GAAI/C,IACAA,EAAKmD,cAAgBnD,EAAKmD,aAEtBnD,EAAKmD,cAAc,CACnB,IAAIE,EAA8B,QAAtBD,EAAKpD,EAAK+C,cAA2B,IAAPK,OAAgB,EAASA,EAAG1D,KAClE2D,GACA,EAAAC,WAAA,uBAAkCD,EAAMrD,EAAKN,MAKzD6C,KAAKU,U,eCnHN,MAAMM,UAAmB,EAAAC,OAI5BnB,cACIC,QACAC,KAAKC,SAda,kBAoBnB,MAAMiB,UAAmB,EAAAD,OAI5BnB,cACIC,QACAC,KAAKC,SAtBa,kB,yBCkBnB,MAAMkB,UAAkB,EAAAF,OAI3BnB,YAAYsB,GACRrB,QACAC,KAAKC,SAzBY,gBA0BjB,MAAMjB,EAASgB,KAAKhB,MAAQoC,EAAQpC,MAC9BqC,EAAkBrB,KAAKqB,eACzBD,EAAQC,gBAAkBF,EAAUG,sBAElCC,EAAUvB,KAAKwB,QAAUH,EAAeI,oBAC9CF,EAAOtB,SA3BiB,uBA6BxB,MAAMyB,EAAgB,CAClB1C,MAAAA,EACA2C,QAASN,EAAeO,cACxBC,aAAcT,EAAQS,cAEpBC,EAAU9B,KAAK+B,QAAU,IAAI,EAAAC,kBAAkBN,GACrDI,EAAO7B,SA3BiB,uBA4BxB,MAAMgC,EAAUjC,KAAKiC,OAAS,IAAI,EAAAC,YAClCD,EAAOE,UAAUZ,GACZH,EAAQgB,aACTH,EAAOE,UAAUL,GAMzB,mBACI,OAAO9B,KAAK+B,QAKhB,aACI,OAAO/B,KAAK+B,QAAQD,OAKxB,iBACI,OAAO9B,KAAKwB,QAAQrE,KAKxBkF,YAAYC,GACR,MAAML,EAASjC,KAAKiC,OAChBjC,KAAKuC,YACLvC,KAAKuC,UAAU/B,OAAS,MAE5BR,KAAK+B,QAAQS,OACbxC,KAAKuC,UAAYD,EACjBL,EAAOE,UAAUG,GAKrBG,aACQzC,KAAKuC,YACLvC,KAAKuC,UAAU/B,OAAS,MAE5BR,KAAK+B,QAAQW,OAKjBC,UAAUtD,GACNW,KAAKwB,QAAQtC,eAAiBG,EAKlCuD,UAEQ5C,KAAK6C,aAGT7C,KAAKwB,QAAU,KACfxB,KAAK+B,QAAU,KACf/B,KAAKuC,UAAY,KACjBxC,MAAM6C,aAMd,SAAWzB,GAMP,MAAM2B,EAIFhD,YAAYsB,EAAU,IAClBpB,KAAK+B,QAAUX,EAAQQ,eAAiBT,EAAU4B,qBAKtD,oBACI,OAAO/C,KAAK+B,QAKhBN,oBACI,OAAO,IAAIuB,GAGnB7B,EAAU2B,eAAiBA,EAW3B3B,EAAU4B,sBANiB,IAAI,EAAAE,yBACLC,gBAS1B/B,EAAUG,sBAAwB,IAAIwB,EAAe,IAzCzD,CA0CG3B,IAAcA,EAAY,KAItB,MAAM6B,UAAoB,EAAA/B,OAI7BnB,cACIC,QACAC,KAAKmD,gBAAkB,KACvBnD,KAAKC,SAzJc,kBA8JvB,qBACI,OAAOD,KAAKmD,gBAEhB,mBAAmB9D,GACfW,KAAKmD,gBAAkB9D,EAEnBW,KAAK7C,KAAKiG,YADA,OAAV/D,EACwB,IAGA,IAAIA,GAAS,S,+CClL1C,MAAMgE,EAITvD,YAAYsB,EAAU,IAUlB,GATApB,KAAKsD,KAAO,IAAI,EAAAC,cAChBvD,KAAKwD,aAAc,EACnBxD,KAAKyD,cAAgB,IAAI,EAAAC,OAAO1D,MAChCA,KAAK2D,SAAW,IAAI,EAAAD,OAAO1D,MAC3BA,KAAK4D,SAAW,KAChB5D,KAAK6D,YAAc,KACnB7D,KAAK8D,cAAe,EACpB9D,KAAKqB,eACDD,EAAQC,gBAAkBgC,EAAiB/B,sBAC3CF,EAAQ2C,OACR,IAAK,MAAMC,KAAOC,OAAOC,KAAK9C,EAAQ2C,aACNI,IAAxB/C,EAAQ2C,OAAOC,IACfhE,KAAKoE,IAAIJ,EAAK5C,EAAQ2C,OAAOC,IAIzChE,KAAKsD,KAAKe,QAAQC,QAAQtE,KAAKuE,cAAevE,MAG1CoB,EAAQoD,UACRxE,KAAK4D,SAAWxC,EAAQoD,QACxBxE,KAAK6D,YAAc7D,KAAK4D,SAASa,YAAY,eACzCzE,KAAK6D,YAAYa,MACjB1E,KAAK2E,SAAS3E,KAAK6D,YAAYa,OAG/B1E,KAAK6D,YAAYO,IAAIpE,KAAK4E,UAE9B5E,KAAK6D,YAAYQ,QAAQC,QAAQtE,KAAK6E,qBAAsB7E,OAMpE,mBACI,OAAOA,KAAKyD,cAKhB,cACI,OAAOzD,KAAK2D,SAKhB,WACI,OAAO3D,KAAKsD,KAAKY,OAKrB,aACI,OAAOlE,KAAKsD,KAAKY,OAAOpF,OAK5B,iBACI,OAAOkB,KAAKwD,YAKhBZ,UACQ5C,KAAK6C,aAGT7C,KAAKwD,aAAc,EACnBxD,KAAKsD,KAAKV,UACV,EAAAc,OAAA,UAAiB1D,OAKrB8E,IAAId,GACA,OAAOhE,KAAKsD,KAAKwB,IAAId,GAKzBU,IAAIV,GACA,OAAOhE,KAAKsD,KAAKoB,IAAIV,GAKzBI,IAAIJ,EAAK3E,GAEL,MAAM0F,EAAO/E,KAAKgF,YAAY,CAAE3F,MAAAA,IAChCW,KAAKsD,KAAKc,IAAIJ,EAAKe,GAKvBE,OAAOjB,GACHhE,KAAKsD,KAAK4B,OAAOlB,GAKrBmB,QACInF,KAAKsD,KAAKS,SAASqB,SAASL,IACxBA,EAAKnC,aAET5C,KAAKsD,KAAK6B,QAQdR,SAASZ,GACL/D,KAAKmF,QACLlB,OAAOC,KAAKH,GAAQqB,SAAQpB,SACJG,IAAhBJ,EAAOC,IACPhE,KAAKoE,IAAIJ,EAAKD,EAAOC,OAOjCY,SACI,MAAMS,EAAM,GACZ,IAAK,MAAMrB,KAAOhE,KAAKsD,KAAKY,OACxBmB,EAAIrB,GAAOhE,KAAKsD,KAAKoB,IAAIV,GAAKY,SAElC,OAAOS,EAKXL,YAAY5D,GACR,MACM2D,EADU/E,KAAKqB,eACAiE,sBAAsBlE,GAE3C,OADA2D,EAAKV,QAAQC,QAAQtE,KAAKuF,iBAAkBvF,MACrC+E,EAKXR,cAAciB,EAAQC,GACdzF,KAAK6D,cAAgB7D,KAAK8D,eAC1B9D,KAAK8D,cAAe,EACpB9D,KAAK6D,YAAYO,IAAIpE,KAAK4E,UAC1B5E,KAAK8D,cAAe,GAExB9D,KAAK2D,SAAS+B,KAAKD,GACnBzF,KAAKyD,cAAciC,UAAK,GAM5Bb,qBAAqBW,EAAQC,GACpBzF,KAAK8D,eACN9D,KAAK8D,cAAe,EACpB9D,KAAK2E,SAASc,EAAKE,UACnB3F,KAAK8D,cAAe,GAM5ByB,mBACIvF,KAAKyD,cAAciC,UAAK,KAMhC,SAAWrC,GAIP,MAAMP,EAIFwC,sBAAsBlE,GAClB,OAAO,IAAI,EAAAwE,gBAAgBxE,IAGnCiC,EAAiBP,eAAiBA,EAIlCO,EAAiB/B,sBAAwB,IAAIwB,EAhBjD,CAiBGO,IAAqBA,EAAmB,KAMpC,MAAMwC,EAIT/F,YAAYsB,GACRpB,KAAK8F,QAAU1E,EAAQZ,QAAU,KACjCR,KAAK+F,OAAS3E,EAAQpC,MAK1B,iBAAiBgH,GACb,OAAIhG,KAAK8F,UAAYE,EAAIC,WAAW,eACzBjG,KAAK8F,QAAQI,WAAWF,GAE5BA,EAQX,qBAAqBG,GACjB,GAAInG,KAAK8F,UAAYK,EAAKF,WAAW,eACjC,OAAOjG,KAAK8F,QAAQM,eAAeD,GAGvC,MAAMnC,EAAMmC,EAAK3G,MAAM,cAAcV,QAC/BuH,EAAarG,KAAK+F,OAAOrB,IAAIV,GACnC,QAAmBG,IAAfkC,EAEA,OAAOF,EAEX,MAAM,KAAEG,GAASD,EACXE,EAAWtC,OAAOC,KAAKoC,GAAM,GAEnC,QAAiBnC,IAAboC,IACsD,IAAtD,EAAAC,qBAAA,kBAAuCD,GACvC,MAAM,IAAIE,MAAM,0CAA0CF,OAG9D,MADgB,QAAQA,YAAmBD,EAAKC,KAOpDG,QAAQV,GACJ,IAAIzF,EAAIM,EAAI8F,EACZ,QAAI3G,KAAK8F,UAAYE,EAAIC,WAAW,iBAC2E,QAAnGU,EAA4C,QAAtC9F,GAAMN,EAAKP,KAAK8F,SAASY,eAA4B,IAAP7F,OAAgB,EAASA,EAAG+F,KAAKrG,EAAIyF,UAAyB,IAAPW,GAAgBA,G,ICwX3IE,E,sBAtmBG,SAASC,EAAgB9H,GAC5B,MAAsB,SAAfA,EAAMC,KAEV,SAAS8H,EAAoB/H,GAChC,MAAsB,aAAfA,EAAMC,KAEV,SAAS+H,EAAehI,GAC3B,MAAsB,QAAfA,EAAMC,KAKV,MAAMgI,UAAkB,EAAAC,WAAA,MAI3BpH,YAAYsB,GACR,IAAIb,EACJR,MAAM,CACFyE,QAASpD,EAAQoD,QACjB2C,GAAI/F,EAAQ+F,KAA+B,QAAvB5G,EAAKa,EAAQ3D,YAAyB,IAAP8C,OAAgB,EAASA,EAAG4G,KAAO,EAAAC,KAAA,UAK1FpH,KAAKqH,eAAiB,IAAI,EAAA3D,OAAO1D,MAIjCA,KAAKsH,aAAe,IAAI,EAAA5D,OAAO1D,MAI/BA,KAAKuH,cAAgB,gBACrBvH,KAAKX,MAAMgF,QAAQC,QAAQtE,KAAKwH,gBAAiBxH,MAChCA,KAAKwE,QAAQC,YAAY,QACjCL,IAAIpE,KAAKf,MAClB,MAAMwI,EAAqBzH,KAAKwE,QAAQkD,UAAU,YAClDD,EAAmBpD,QAAQC,QAAQtE,KAAK2H,wBAAyB3H,MACjEyH,EAAmBpD,QAAQC,QAAQtE,KAAKwH,gBAAiBxH,MACzD,MAAMvC,EAAO2D,EAAQ3D,KACfmK,EAAU5H,KAAKwE,QAAQC,YAAY,WAEzC,GADAmD,EAAQvD,QAAQC,QAAQtE,KAAK6H,iBAAkB7H,OAC1CvC,EAED,YADAmK,EAAQxD,KAAI,GAGhBwD,EAAQxD,MAAM3G,EAAKqK,SAAkB,gBAC9BrK,EAAKqK,SAAkB,QAE1BC,MAAMC,QAAQvK,EAAKwK,QACnBjI,KAAKX,MAAMC,KAAO7B,EAAKwK,OAClBC,KAAIC,GAAKA,EAAEC,QAAQ,QAAS,MAAMA,QAAQ,MAAO,QACjDC,KAAK,IAGVrI,KAAKX,MAAMC,KAAO7B,EAAKwK,OAAOG,QAAQ,QAAS,MAAMA,QAAQ,MAAO,MAExE,MAAMN,EAAW,EAAAQ,QAAA,SAAiB7K,EAAKqK,UACrB,QAAd9H,KAAKf,aACE6I,EAAiB,OAEV,SAAd9H,KAAKf,cACE6I,EAAoB,iBACpBA,EAAmB,UAE9B,IAAK,MAAM9D,KAAO8D,EACdL,EAAmBrD,IAAIJ,EAAK8D,EAAS9D,IAM7C,WAGI,MAAO,MAKX,SACI,OAAOhE,KAAKuI,YAAYC,QAK5B,eACI,OAAOxI,KAAKwE,QAAQE,IAAI,YAK5B,cACI,OAAO1E,KAAKwE,QAAQiE,SAAS,WAKjC,YAAY9C,GACS3F,KAAK4H,UACLjC,GAGjB3F,KAAKwE,QAAQkE,SAAS,UAAW/C,GAKrCf,SACI,MAAMkD,EAAW7D,OAAO0E,OAAO,MAC/B,IAAK,MAAM3E,KAAOhE,KAAK8H,SAAS5D,OAAQ,CACpC,MAAM7E,EAAQuJ,KAAKC,MAAMD,KAAKE,UAAU9I,KAAK8H,SAASpD,IAAIV,KAC1D8D,EAAS9D,GAAO3E,EAKpB,OAHIW,KAAK4H,UACLE,EAAkB,SAAI,GAEnB,CACHiB,UAAW/I,KAAKf,KAChBgJ,OAAQjI,KAAKX,MAAMC,KACnBwI,SAAAA,GAQRD,iBAAiBD,EAASnC,IAM1BkC,wBAAwBnC,EAAQwD,GAC5B,MAAMlB,EAAW9H,KAAKuI,YAAYU,cAClCjJ,KAAKuH,eAAc,KACf,OAAQyB,EAAM/J,MACV,IAAK,MAGL,IAAK,SACDe,KAAKkJ,oBAAoBpB,EAAUkB,GACnC,MACJ,IAAK,gBACMlB,EAASkB,EAAMhF,KACtB,MACJ,QACI,MAAM,IAAIyC,MAAM,uBAAuBuC,EAAM/J,QAErDe,KAAKuI,YAAYY,YAAYrB,MASrCoB,oBAAoBpB,EAAUkB,GAC1B,OAAQA,EAAMhF,KACV,IAAK,UACD8D,EAASsB,QAAUJ,EAAMrD,SACzB,MACJ,IAAK,YACDmC,EAASuB,UAAYL,EAAMrD,SAC3B,MACJ,IAAK,OACDmC,EAASwB,KAAON,EAAMrD,SACtB,MACJ,IAAK,WACDmC,EAASyB,SAAWP,EAAMrD,SAC1B,MACJ,IAAK,OACDmC,EAAS0B,KAAOR,EAAMrD,SACtB,MACJ,IAAK,UACDmC,EAASF,QAAUoB,EAAMrD,SACzB,MACJ,QAIImC,EAASkB,EAAMhF,KAAOgF,EAAMrD,UAYxC8D,sBAAsBjE,EAAQkE,GAC1B3J,MAAM0J,sBAAsBjE,EAAQkE,GACpC1J,KAAKuH,eAAc,KACf,IAAIhH,EACJ,GAAImJ,EAAOC,eAAgB,CACvB,MAAMhE,EAA4C,QAAhCpF,EAAKmJ,EAAOC,sBAAmC,IAAPpJ,OAAgB,EAASA,EAAGoF,SAClFA,GACA1B,OAAOC,KAAKyB,GAAUuC,KAAIlE,IACtB,OAAQA,GACJ,IAAK,YACDhE,KAAK8H,SAAS1D,IAAI,YAAauB,EAASyD,SACxC,MACJ,IAAK,UACDpJ,KAAK8H,SAAS1D,IAAI,UAAWuB,EAASyD,SACtC,MACJ,IAAK,OACDpJ,KAAK8H,SAAS1D,IAAI,OAAQuB,EAAS2D,MACnC,MACJ,IAAK,WACDtJ,KAAK8H,SAAS1D,IAAI,WAAYuB,EAAS4D,UACvC,MACJ,IAAK,OACDvJ,KAAK8H,SAAS1D,IAAI,OAAQuB,EAAS6D,MACnC,MACJ,IAAK,UACDxJ,KAAK8H,SAAS1D,IAAI,UAAWuB,EAASiC,SACtC,MACJ,QAII5H,KAAK8H,SAAS1D,IAAIJ,EAAK2B,EAAS3B,YAU5DwD,kBACIxH,KAAKqH,eAAe3B,UAAK,IAM1B,MAAMkE,UAA6B3C,EAItCnH,YAAYsB,GACRrB,MAAMqB,GACN,MAAMO,EAAUP,EAAQC,gBAAkBuI,EAAqBtI,sBAC/D,IAAIuI,EACJ,MAAMpM,EAAO2D,EAAQ3D,MACjBA,GAA4B,QAAnBA,EAAKsL,WAA0C,aAAnBtL,EAAKsL,YAC1Cc,EAAcpM,EACToM,aAET7J,KAAK8J,aAAenI,EAAQoI,uBAAuB,CAC/ChG,OAAQ8F,EACRrF,QAASxE,KAAKwE,UAElBxE,KAAK8J,aAAaxC,aAAahD,QAAQtE,KAAKwH,gBAAiBxH,MAKjE,kBACI,OAAOA,KAAK8J,aAKhBlF,SACI,MAAMnH,EAAOsC,MAAM6E,SAInB,OAHI5E,KAAK6J,YAAY/K,SACjBrB,EAAKoM,YAAc7J,KAAK6J,YAAYjF,UAEjCnH,IAMf,SAAWmM,GAIP,MAAM9G,EAIFiH,uBAAuB3I,GACnB,OAAO,IAAIiC,EAAiBjC,IAGpCwI,EAAqB9G,eAAiBA,EAItC8G,EAAqBtI,sBAAwB,IAAIwB,EAhBrD,CAiBG8G,IAAyBA,EAAuB,KAI5C,MAAMI,UAAqBJ,EAI9B,WACI,MAAO,MAKXhF,SACI,MAAMnH,EAAOsC,MAAM6E,SAEnB,OADAnH,EAAK0J,GAAKnH,KAAKmH,GACR1J,GAMR,MAAMwM,UAA0BL,EAInC9J,YAAYsB,GACRrB,MAAMqB,GAENpB,KAAKuG,SAAW,oBAKpB,WACI,MAAO,WAKX3B,SACI,MAAMnH,EAAOsC,MAAM6E,SAEnB,OADAnH,EAAK0J,GAAKnH,KAAKmH,GACR1J,GAMR,MAAMyM,UAAsBjD,EAI/BnH,YAAYsB,GACR,IAAIb,EACJR,MAAMqB,GACNpB,KAAKmK,cAAgB,GACrBnK,KAAKoK,UAAW,EAChB,MAAMzI,EAAUP,EAAQC,gBAAkB6I,EAAc5I,sBAClDsG,EAAU5H,KAAK4H,QACfnK,EAAO2D,EAAQ3D,KACrB,IAAI4M,EAAU,GACd,MAAMnL,EAAiBc,KAAKwE,QAAQC,YAAY,kBA8BhD,GA7BKvF,EAAewF,QACZjH,GAA2B,SAAnBA,EAAKsL,WACb7J,EAAekF,IAAI3G,EAAK6M,iBAAmB,MAC3CD,EAAkC,QAAvB9J,EAAK9C,EAAK4M,eAA4B,IAAP9J,EAAgBA,EAAK,GAGnC,MAAxB9C,EAAK6M,kBAELtK,KAAKmK,cAAgBnK,KAAKX,MAAMC,KAAKiL,SAIzCrL,EAAekF,IAAI,OAG3BlF,EAAemF,QAAQC,QAAQtE,KAAKwK,yBAA0BxK,MAC9DA,KAAKuH,eAAc,KACIvH,KAAKuI,YACbkC,WAAWJ,MAE1BrK,KAAK0K,SAAW/I,EAAQgJ,iBAAiB,CAAE/C,QAAAA,EAAS7D,OAAQsG,IAC5DrK,KAAK0K,SAASrG,QAAQC,QAAQtE,KAAKwH,gBAAiBxH,MACpDA,KAAK0K,SAASrG,QAAQC,QAAQtE,KAAK4K,uBAAwB5K,MAI3DA,KAAK8H,SAASzD,QAAQC,QAAQuC,EAAQgE,gBAAiB7K,MAGnDA,KAAK8H,SAAShD,IAAI,aAAc,CAChC,MAAMuE,EAAYrJ,KAAK8H,SAASpD,IAAI,aACpCmC,EAAQgE,gBAAgB7K,KAAK8H,SAAU,CACnC7I,KAAM,SACN+E,IAAK,YACL8G,SAAUzB,EACV1D,SAAU0D,SAGb,GAAIrJ,KAAK8H,SAAShD,IAAI,WAAY,CACnC,MAAMsE,EAAUpJ,KAAK8H,SAASpD,IAAI,WAC9B0E,EAAQ2B,eAAe,mBACvBlE,EAAQgE,gBAAgB7K,KAAK8H,SAAU,CACnC7I,KAAM,SACN+E,IAAK,UACL8G,SAAU1B,EACVzD,SAAUyD,KAK1B4B,kBAAkBzC,EAAa0C,GACvBA,IACAjL,KAAKkL,iBACL3C,EAAY4C,aAAa/F,SAAQgG,GAAUpL,KAAK0K,SAASW,IAAID,MAEjErL,MAAMiL,kBAAkBzC,EAAa0C,GAKzC,WACI,MAAO,OAKX,qBACI,OAAOjL,KAAKwE,QAAQM,IAAI,kBAClB9E,KAAKwE,QAAQiE,SAAS,kBACtB,KAEV,mBAAmB9C,GAEXA,IADa3F,KAAKd,gBAItBc,KAAKwE,QAAQkE,SAAS,iBAAkB/C,GAAY,MAQxD,cAGI,OAAO3F,KAAKoK,SAKhBkB,UAAUC,GACFA,IAAMvL,KAAKoK,WACNmB,IACDvL,KAAKmK,cAAgBnK,KAAKX,MAAMC,KAAKiL,QAEzCvK,KAAKoK,SAAWmB,EAChBvL,KAAKsH,aAAa5B,KAAK,CACnB4D,KAAM,UACNwB,UAAWS,EACX5F,SAAU4F,KAItBL,iBACIlL,KAAKqK,QAAQlF,QACbnF,KAAKd,eAAiB,KACtBc,KAAKsL,WAAU,GACftL,KAAK8H,SAAS5C,OAAO,aAKzB,cACI,OAAOlF,KAAK0K,SAKhB9H,UACQ5C,KAAK6C,aAGT7C,KAAK0K,SAAS9H,UACd5C,KAAK0K,SAAW,KAChB3K,MAAM6C,WAKVgC,SACI,MAAMnH,EAAOsC,MAAM6E,SAInB,OAHAnH,EAAK6M,gBAAkBtK,KAAKd,gBAAkB,KAC9CzB,EAAK4M,QAAUrK,KAAKqK,QAAQzF,SAC5BnH,EAAK0J,GAAKnH,KAAKmH,GACR1J,EAKXoK,iBAAiBD,EAASnC,GAClBzF,KAAK0K,WACL1K,KAAK0K,SAAS9C,QAAUnC,EAAKE,UAEjC3F,KAAKsH,aAAa5B,KAAK,CACnB4D,KAAM,UACNwB,SAAUrF,EAAKqF,SACfnF,SAAUF,EAAKE,WAMvBiF,uBAAuBpF,EAAQwD,GAC3B,MAAMwC,EAAWxL,KAAKuI,YACtBvI,KAAKuH,eAAc,KACf,OAAQyB,EAAM/J,MACV,IAAK,MAAO,CACR,MAAMoL,EAAUrB,EAAMyC,UAAUvD,KAAIkD,GAAUA,EAAOxG,WACrD4G,EAASE,cAAc1C,EAAM2C,SAAU3C,EAAM2C,SAAWtB,EAAQvL,OAAQuL,GACxE,MAEJ,IAAK,MAAO,CACR,MAAMoB,EAAYzC,EAAMyC,UAAUvD,KAAIkD,GAAUA,EAAOxG,WACvD4G,EAASE,cAAc1C,EAAM4C,SAAU5C,EAAM6C,UAAU/M,OAAQ2M,GAC/D,MAEJ,IAAK,SACDD,EAASE,cAAc1C,EAAM4C,SAAU5C,EAAM6C,UAAU/M,QACvD,MACJ,QACI,MAAM,IAAI2H,MAAM,uBAAuBuC,EAAM/J,YAO7DuI,kBACgC,OAAxBxH,KAAKd,gBACLc,KAAKsL,UAAUtL,KAAKmK,gBAAkBnK,KAAKX,MAAMC,KAAKiL,QAE1DvK,KAAKqH,eAAe3B,UAAK,GAW7B+D,sBAAsBjE,EAAQkE,GAC1B3J,MAAM0J,sBAAsBjE,EAAQkE,GACpC1J,KAAKuH,eAAc,KACXmC,EAAOoC,gBACP9L,KAAKkL,iBACL1F,EAAO2F,aAAa/F,SAAQgG,GAAUpL,KAAK0K,SAASW,IAAID,MAExD1B,EAAOqC,uBACP/L,KAAKd,eAAiBwK,EAAOqC,qBAAqBpG,SAC5C+D,EAAOqC,qBAAqBpG,SAC5B,SAOlB6E,yBAAyB3L,EAAO4G,GAC5B,MAAM+F,EAAWxL,KAAKuI,YACtBvI,KAAKuH,eAAc,KACfiE,EAASlB,gBAAkB7E,EAAKE,SAC1BF,EAAKE,SACL,QAEV3F,KAAKqH,eAAe3B,UAAK,GACzB1F,KAAKsH,aAAa5B,KAAK,CACnB4D,KAAM,iBACNwB,SAAUrF,EAAKqF,SACfnF,SAAUF,EAAKE,WAEfF,EAAKE,UAAY3F,KAAKgM,SACtBhM,KAAKsL,WAAU,KAO3B,SAAWpB,GAIP,MAAMpH,EAIF6H,iBAAiBvJ,GACb,OAAO,IAAI,EAAA6K,gBAAgB7K,IAGnC8I,EAAcpH,eAAiBA,EAI/BoH,EAAc5I,sBAAwB,IAAIwB,EAhB9C,CAiBGoH,IAAkBA,EAAgB,KAErC,SAAWrD,GA2BPA,EAAQgE,gBA1BR,SAAyB/C,EAAUrC,GAC/B,GAAiB,cAAbA,EAAKzB,IAAqB,CAC1B,MAAMoF,EAAWtB,EAASpD,IAAI,YAAc,IACtC,eAAEwH,GAAmB9C,EAAS+C,EA7nBV,SAAUhE,EAAG/H,GAC/C,IAAIgM,EAAI,GACR,IAAK,IAAIC,KAAKlE,EAAOlE,OAAOqI,UAAUvB,eAAenE,KAAKuB,EAAGkE,IAAMjM,EAAEmM,QAAQF,GAAK,IAC9ED,EAAEC,GAAKlE,EAAEkE,IACb,GAAS,MAALlE,GAAqD,mBAAjClE,OAAOuI,sBACtB,KAAIC,EAAI,EAAb,IAAgBJ,EAAIpI,OAAOuI,sBAAsBrE,GAAIsE,EAAIJ,EAAEvN,OAAQ2N,IAC3DrM,EAAEmM,QAAQF,EAAEI,IAAM,GAAKxI,OAAOqI,UAAUI,qBAAqB9F,KAAKuB,EAAGkE,EAAEI,MACvEL,EAAEC,EAAEI,IAAMtE,EAAEkE,EAAEI,KAE1B,OAAOL,EAonBkDO,CAAOvD,EAAS,CAAC,mBAC9D8C,IAAmBzG,EAAKE,gBACFxB,IAAlBsB,EAAKE,WACLwG,EAA2B,eAAI1G,EAAKE,UAED,IAAnC1B,OAAOC,KAAKiI,GAAYrN,OACxBgJ,EAAS5C,OAAO,WAGhB4C,EAAS1D,IAAI,UAAW+H,SAI/B,GAAiB,YAAb1G,EAAKzB,IAAmB,CAC7B,MAAMoF,EAAW3D,EAAKE,UAAY,GAC9ByD,EAAQ2B,eAAe,kBACvBjD,EAAS1D,IAAI,YAAagF,EAAQ8C,gBAGlCpE,EAAS5C,OAAO,eAvBhC,CA4BG2B,IAAYA,EAAU,K,eC/oBzB,MAYM+F,EAAgB,yBAgBf,MAAMC,UAAoB,EAAAhN,YAI7BC,YAAYgN,GACR/M,QACAC,KAAKC,SAlCa,kBAmClBD,KAAK+M,UAAYD,EAKrBzM,YAAYD,IAER0M,EADiB9M,KAAK+M,WACb3M,IAMV,MAAM4M,UAAyBH,EAIlC/M,YAAYgN,GACR/M,MAAM+M,GACN9M,KAAKC,SAtCmB,uBA2C5BC,SACI,MAAO,CACH,gBAAoB,MAAO,CAAEP,UAzDd,uCAyD6CqE,IAAK,UACjE,gBAAoB,MAAO,CAAErE,UAAWiN,EAAezM,QAASC,GAAKJ,KAAKK,YAAYD,GAAI4D,IAAK,WAC3F,gBAAoB,EAAAiJ,aAAA,MAAoB,CAAEtN,UAAW,mBAAoBuN,gBAAiB,SAAUC,OAAQ,OAAQC,MAAO,YAOpI,MAAMC,UAA0BR,EAInC/M,YAAYgN,GACR/M,MAAM+M,GACN9M,KAAKC,SAxDoB,wBA6D7BC,SACI,MAAO,CACH,gBAAoB,MAAO,CAAEP,UA3Eb,wCA2E6CqE,IAAK,WAClE,gBAAoB,MAAO,CAAErE,UAAWiN,EAAezM,QAASC,GAAKJ,KAAKK,YAAYD,GAAI4D,IAAK,WAC3F,gBAAoB,EAAAiJ,aAAA,MAAoB,CAAEtN,UAAW,mBAAoBuN,gBAAiB,SAAUC,OAAQ,OAAQC,MAAO,Y,mCC9F3I,MACME,EAAqB,qBAIpB,MAAMC,UAAqB,EAAAtM,OAC9BnB,YAAY0N,GACRzN,QACAC,KAAKwN,WAAaA,EAClBxN,KAAKyN,WAAY,EACjBzN,KAAK0N,aAAc,EACnB1N,KAAK2N,gBAAkB,GACvB3N,KAAKC,SAZe,uBAcxB2N,cAAcC,GACV9N,MAAM6N,cAAcC,GACpB7N,KAAK7C,KAAK2Q,iBAAiB,WAAY9N,MACvCA,KAAK7C,KAAK2Q,iBAAiB,YAAa9N,MAE5C+N,cAAcF,GACV9N,MAAM6N,cAAcC,GACpB7N,KAAK7C,KAAK6Q,oBAAoB,WAAYhO,MAC1CA,KAAK7C,KAAK6Q,oBAAoB,YAAahO,MAQ/CiO,YAAYjF,GACR,IAAIzI,EAAIM,EACR,OAAQmI,EAAM/J,MACV,IAAK,WACqC,QAArCsB,EAAKP,KAAKwN,WAAWU,kBAA+B,IAAP3N,GAAyBA,EAAG4N,WAAW/I,SAAQjI,IACzFA,EAAKiR,UAAUnJ,OAAOqI,MAE1Be,SAASC,gBAAgBC,MAAMC,YAAY,iCAAkC,IAC7ExO,KAAKyN,WAAY,EACjB,MACJ,IAAK,YACDzN,KAAKyO,aACDzF,EAAM0F,QAAU1O,KAAK7C,KAAKwR,wBAAwBC,EACtD5O,KAAK0N,aAAc,EACd1N,KAAKyN,YACgC,QAArC5M,EAAKb,KAAKwN,WAAWU,kBAA+B,IAAPrN,GAAyBA,EAAGsN,WAAW/I,SAAQjI,IACzFA,EAAKiR,UAAU/C,IAAIiC,MAEvBtN,KAAKyN,WAAY,GAErBoB,OAAOf,iBAAiB,YAAa9N,MACrC6O,OAAOf,iBAAiB,UAAW9N,MACnC,MACJ,IAAK,YAAa,CACd,IAAKA,KAAKyN,YAAczN,KAAK0N,YACzB,OAEJ,MAAMoB,EAAa9O,KAAKwN,WAAWmB,wBAC7BI,EAAa/F,EAAM0F,QAAUI,EAAWF,EAAI5O,KAAKyO,aACjDO,EAAgB,EAClBzQ,KAAK0Q,IAAI1Q,KAAK2Q,IAAIH,EAAY/O,KAAK2N,iBAAkBmB,EAAW1B,MAAQpN,KAAK2N,kBACxEmB,EAAW1B,MAAQpN,KAAK2N,iBAE7BpP,KAAK4Q,MAAsB,IAAhBH,GAAuB,IAAM,GACxCX,SAASC,gBAAgBC,MAAMC,YAAY,iCAAkCQ,EAAgB,MAEjG,MAEJ,IAAK,UACDhP,KAAK0N,aAAc,EACnBmB,OAAOb,oBAAoB,YAAahO,MACxC6O,OAAOb,oBAAoB,UAAWhO,QClDtD,MAwCMoP,EAAc,eAaPC,EAA6B,8BACpCC,EAA0B,2BAS1BC,EAAiB,kBACjBC,GAAmB,mBAYnBC,GAAqB,sCAOpB,MAAMC,WAAa,EAAAzO,OAItBnB,YAAYsB,GACRrB,QACAC,KAAK2P,WAAY,EACjB3P,KAAK4P,cAAe,EACpB5P,KAAK6P,eAAgB,EACrB7P,KAAK8P,eAAgB,EACrB9P,KAAKC,SA7FM,WA8FX,MAAMjB,EAASgB,KAAK+F,OAAS3E,EAAQpC,MAC/BqC,EAAkBrB,KAAKqB,eACzBD,EAAQC,gBAAkBqO,GAAKpO,sBACnCtB,KAAKiC,OAAS,IAAI,EAAAC,YAElB,MAAM6N,EAAS1O,EAAe2O,mBAC9BD,EAAO9P,SAhGW,kBAiGlBD,KAAKiC,OAAOE,UAAU4N,GAEtB,MAAME,EAAgBjQ,KAAKkQ,cAAgB,IAAI,EAAAC,MAC/CF,EAAahQ,SA5FY,wBA6FzB,MAAMmQ,EAAiB,IAAI9P,EAC3B8P,EAAenQ,SA9EY,0BA+E3B,MAAMoQ,EAASrQ,KAAKsQ,OAAS,IAAInP,EAAU,CACvCnC,MAAAA,EACAqC,eAAAA,EACAQ,aAAcT,EAAQmP,mBACtBnO,YAAahB,EAAQgB,cAEzBiO,EAAMpQ,SA7FgB,qBA8FtBgQ,EAAa9N,UAAUiO,GACvBH,EAAa9N,UAAUkO,GACvBrQ,KAAKiC,OAAOE,UAAU8N,GACtBjQ,KAAKwQ,kBAAoB,IAAIxD,GAAiB,KAC1ChN,KAAKS,aAAeT,KAAKS,eAG7B,MAAMgQ,EAASzQ,KAAKqB,eAAeqP,mBAInC,GAHAD,EAAOxQ,SAlHW,kBAmHlBD,KAAKiC,OAAOE,UAAUsO,GAElBrP,EAAQuP,aAAc,CACtB,IAAIjP,EAAgB,GACpBuC,OAAOC,KAAK9C,EAAQuP,cAAcvL,SAASpB,IACvC,IAAIzD,EAAIM,EACRa,EAAcsC,GAA2F,QAAnFnD,EAAqC,QAA/BN,EAAKa,EAAQuP,oBAAiC,IAAPpQ,OAAgB,EAASA,EAAGyD,UAAyB,IAAPnD,EAAgBA,EAAK,QAE1Ib,KAAK8B,OAAO8O,WAAWlP,GAE3B1C,EAAM8I,SAASzD,QAAQC,QAAQtE,KAAK6Q,kBAAmB7Q,MAS3D8Q,kBAGI,OAFA9Q,KAAK+Q,oBACL/Q,KAAKgR,oBACEhR,KAKX,iBACI,OAAKA,KAAK4P,aAIC5P,KAAKwQ,kBAAkBrT,KACzB8T,kBAJEjR,KAAKsQ,OAAOtS,WAU3B,mBACI,OAAOgC,KAAKsQ,OAAOxS,aAKvB,aACI,OAAOkC,KAAKsQ,OAAOxO,OAKvB,YACI,OAAO9B,KAAK+F,OAKhB,gBACI,OAAO/F,KAAKsQ,OAKhB,eACI,OAAOtQ,KAAK2P,UAEhB,aAAatQ,GACLA,IAAUW,KAAK2P,YAGnB3P,KAAK2P,UAAYtQ,EACbW,KAAKkR,cACLlR,KAAKmR,oBAETnR,KAAKU,UAKTyQ,oBACI,MAAM,SAAErJ,GAAa9H,KAAKhB,MACpBoS,EAAUtJ,EAASpD,IAAI,YACxB1E,KAAKqR,WAAwB,IAAZD,IAChBpR,KAAKqR,eAAwBlN,IAAZiN,IAGnBpR,KAAKqR,SACLrR,KAAKhB,MAAM8I,SAAS1D,IAAI,YAAY,GAGpCpE,KAAKhB,MAAM8I,SAAS5C,OAAO,aAMnC8L,oBACIhR,KAAKqR,UAAmD,IAAxCrR,KAAKhB,MAAM8I,SAASpD,IAAI,YAK5C,YACI,OAAO4M,QAAQC,aAAQpN,GAK3BxB,UAAUtD,GACNW,KAAKsQ,OAAO3N,UAAUtD,GAK1B,kBACI,OAAOW,KAAK4P,aAEhB,gBAAgBvQ,GACZ,GAAIW,KAAK4P,eAAiBvQ,EACtB,OAEJ,MAAM4C,EAASjC,KAAKkQ,cAAcjO,OAC9B5C,GACAW,KAAKsQ,OAAO9P,OAAS,KACrByB,EAAOE,UAAUnC,KAAKwQ,qBAGtBxQ,KAAKwQ,kBAAkBhQ,OAAS,KAChCyB,EAAOE,UAAUnC,KAAKsQ,SAE1BtQ,KAAK4P,aAAevQ,EAChBW,KAAKwR,cACLxR,KAAKyR,oBAETzR,KAAK0R,kBAAkBrS,GAK3BoS,oBACI,MAAMrI,EAAUnF,OAAO0N,OAAO,GAAI3R,KAAKhB,MAAM8I,SAASpD,IAAI,YACrD1E,KAAKS,cAAyC,IAA1B2I,EAAQwI,gBAC3B5R,KAAKS,kBAAyC0D,IAA1BiF,EAAQwI,gBAG9B5R,KAAKS,YACL2I,EAAQwI,eAAgB,SAGjBxI,EAAQwI,cAEiB,IAAhC3N,OAAOC,KAAKkF,GAAStK,OACrBkB,KAAKhB,MAAM8I,SAAS5C,OAAO,WAG3BlF,KAAKhB,MAAM8I,SAAS1D,IAAI,UAAWgF,IAM3C2H,oBACI,MAAM3H,EAAUpJ,KAAKhB,MAAM8I,SAASpD,IAAI,YAAc,GACtD1E,KAAKS,cAAgB2I,EAAQwI,cAUjCF,kBAAkBrS,IAMlB,mBACI,OAAOW,KAAK6P,cAEhB,iBAAiBxQ,GACTW,KAAK6P,gBAAkBxQ,IAG3BW,KAAK6P,cAAgBxQ,EACjBA,GACAW,KAAK+Q,qBAMb,mBACI,OAAO/Q,KAAK8P,cAEhB,iBAAiBzQ,GACTW,KAAK8P,gBAAkBzQ,IAG3BW,KAAK8P,cAAgBzQ,EACjBA,GACAW,KAAKgR,qBAMba,QAEI,OAAO,IAAI/R,EADSE,KAAKF,aACF,CACnBd,MAAOgB,KAAKhB,MACZqC,eAAgBrB,KAAKqB,eACrBe,aAAa,IAMrBQ,UAEQ5C,KAAK6C,aAGT7C,KAAKsQ,OAAS,KACdtQ,KAAK+F,OAAS,KACd/F,KAAKkQ,cAAgB,KACrBlQ,KAAKwQ,kBAAoB,KACzBzQ,MAAM6C,WAKVgL,cAAcC,GACV7N,KAAKU,SAKToR,kBAAkBjE,GACd7N,KAAK8B,OAAOiQ,QAKhBC,aAAanE,GAET7N,KAAK8B,OAAOmQ,UAKhBC,gBAAgBrE,GACP7N,KAAK+F,QAIN/F,KAAK8B,OAAOqQ,UAAU,cAAgBnS,KAAK2P,YAC3C3P,KAAK8B,OAAOsQ,UAAU,WAAYpS,KAAK2P,WACvC3P,KAAKqS,YA3VM,kBA2VsBrS,KAAK2P,YAM9CkB,kBAAkB7R,EAAOyG,GACrB,OAAQA,EAAKzB,KACT,IAAK,UACGhE,KAAKwR,cACLxR,KAAK+Q,oBAET,MACJ,IAAK,WACG/Q,KAAKkR,cACLlR,KAAKgR,uBAWzB,SAAWtB,GAMP,MAAM5M,EAIFhD,YAAYsB,EAAU,IAClBpB,KAAKsS,eACDlR,EAAQQ,eAAiBT,EAAU4B,qBAK3C,oBACI,OAAO/C,KAAKsS,eAKhBtC,mBACI,OAAO,IAAIhP,EAKf0P,mBACI,OAAO,IAAIxP,EAKfO,oBACI,OAAO,IAAIuB,EAKfuP,qBACI,OAAO,IAAI,EAAAC,aAKfC,YAAYrR,GACR,OAAO,IAAI,EAAAsR,MAAMtR,IAGzBsO,EAAK5M,eAAiBA,EAItB4M,EAAKpO,sBAAwB,IAAIwB,EAvDrC,CAwDG4M,KAASA,GAAO,KAOZ,MAAMiD,WAAiBjD,GAI1B5P,YAAYsB,GACRrB,MAAMqB,GACNpB,KAAK4S,eAAgB,EACrB5S,KAAK6S,eAAgB,EACrB7S,KAAK8S,iBAAkB,EACvB9S,KAAKC,SArbW,eAubhB,MAAM8S,EAAc/S,KAAKgT,YAAc5R,EAAQ2R,WACzC1R,EAAiBrB,KAAKqB,eACtBrC,EAAQgB,KAAKhB,MACnB,IAAKoC,EAAQgB,YAAa,CAEtB,MAAM6Q,EAAiBjT,KAAKkT,eAAiB,IAAI,EAAA/C,MACjD8C,EAAchT,SAzdQ,yBA0dtB,MAAMkT,EAAkB,IAAIxS,EAC5BwS,EAAgBlT,SA3cQ,2BA4cxB,MAAMmL,EAAUpL,KAAKoT,QAAU,IAAI,EAAAC,WAAW,CAC1CrU,MAAOA,EAAMqL,QACb0I,WAAAA,EACA1R,eAAgBA,EAChBiS,iBAAkBlS,EAAQkS,mBAE9BlI,EAAOnL,SA1dY,sBA8dU,IAAzBjB,EAAMqL,QAAQvL,QACdkB,KAAKC,SAASuP,IAElBpE,EAAOmI,oBAAoBjP,QAAQtE,KAAKwT,qBAAsBxT,MAC9DiT,EAAc9Q,UAAUgR,GACxBF,EAAc9Q,UAAUiJ,GACxBpL,KAAKiC,OAAOwR,aAAa,EAAG,IAAIlG,EAAavN,KAAK7C,OAClD6C,KAAKiC,OAAOwR,aAAa,EAAGR,GACxBjU,EAAMgN,SACNhM,KAAKC,SAASmP,GAElBpP,KAAK0T,mBAAqB,IAAIrG,GAAkB,KAC5CrN,KAAKY,cAAgBZ,KAAKY,gBAGlC5B,EAAMsI,aAAahD,QAAQtE,KAAK2T,eAAgB3T,MASpD8Q,kBAII,OAHA/Q,MAAM+Q,kBACN9Q,KAAK4T,oBACL5T,KAAK2C,UAAU,GAAG3C,KAAKhB,MAAME,gBAAkB,MACxCc,KAKX,iBACI,OAAOA,KAAKoT,QAKhB,mBACI,OAAOpT,KAAK4S,cAEhB,iBAAiBvT,GACb,GAAIW,KAAK4S,gBAAkBvT,EACvB,OAEJ,MAAM4C,EAASjC,KAAKkT,eAAejR,OAC/B5C,GACA4C,EAAO4R,aAAa7T,KAAKoT,SACzBnR,EAAOE,UAAUnC,KAAK0T,oBAClB1T,KAAKS,cAAgBT,KAAKkT,eAAeY,UACzC9T,KAAKkT,eAAe1Q,SAIpBxC,KAAKkT,eAAeY,UACpB9T,KAAKkT,eAAexQ,OAExBT,EAAO4R,aAAa7T,KAAK0T,oBACzBzR,EAAOE,UAAUnC,KAAKoT,UAE1BpT,KAAK4S,cAAgBvT,EACjBW,KAAKwR,cACLxR,KAAKyR,oBAMbA,oBAMIzR,KAAK8S,iBAAkB,EACvB,IACI/S,MAAM0R,oBACN,MAAM3J,EAAW9H,KAAKhB,MAAM8I,SACtBuB,EAAYrJ,KAAKhB,MAAM8I,SAASpD,IAAI,aAC1C,GAAK1E,KAAKY,eAA8B,IAAdyI,IACpBrJ,KAAKY,mBAA8BuD,IAAdkF,EACvB,OAIArJ,KAAKY,aACLkH,EAAS1D,IAAI,aAAa,GAG1B0D,EAAS5C,OAAO,aAGxB,QACIlF,KAAK8S,iBAAkB,GAS/B/B,oBACIhR,MAAMgR,oBACN/Q,KAAKY,eAAiBZ,KAAKhB,MAAM8I,SAASpD,IAAI,aAKlD,sBACI,OAAO1E,KAAK+T,iBAEhB,oBAAoB1U,GAChBW,KAAKqS,YAAY,yBAA0BhT,GAC3CW,KAAK+T,iBAAmB1U,EACpBW,KAAKgU,cACLhU,KAAKiU,oBAMbA,oBACI,MAAM,SAAEnM,GAAa9H,KAAKhB,MACpBoS,EAAUtJ,EAASpD,IAAI,YACxB1E,KAAKkU,kBAA+B,IAAZ9C,IACvBpR,KAAKkU,sBAA+B/P,IAAZiN,IAG1BpR,KAAKkU,gBACLpM,EAAS1D,IAAI,YAAY,GAGzB0D,EAAS5C,OAAO,aAMxB0O,oBACI,MAAM9L,EAAW9H,KAAKhB,MAAM8I,SAEK,SAA7BA,EAASpD,IAAI,YACb1E,KAAKkU,iBAAkB,EAGvBlU,KAAKkU,kBAAoBpM,EAASpD,IAAI,YAM9C,mBACI,OAAO1E,KAAK6S,cAEhB,iBAAiBxT,GACTW,KAAK6S,gBAAkBxT,IAG3BW,KAAK6S,cAAgBxT,EACjBA,GACAW,KAAK4T,qBAWblC,kBAAkBrS,IACTA,GAASW,KAAKkT,eAAeY,SAC9B9T,KAAKkT,eAAexQ,OAEfrD,IAAUW,KAAKkT,eAAeY,UAAY9T,KAAK4S,eACpD5S,KAAKkT,eAAe1Q,OAM5BqP,QAEI,OAAO,IAAI/R,EADSE,KAAKF,aACF,CACnBd,MAAOgB,KAAKhB,MACZqC,eAAgBrB,KAAKqB,eACrB0R,WAAY/S,KAAKgT,YACjB5Q,aAAa,IAMrB+R,kBACI,OAAO,IAAI,EAAAC,qBAAqB,CAC5BpV,MAAOgB,KAAKhB,MAAMqL,QAClBhJ,eAAgBrB,KAAKqB,eACrB0R,WAAY/S,KAAKgT,cAMzBpQ,UACQ5C,KAAK6C,aAGT7C,KAAKoT,QAAQG,oBAAoBc,WAAWrU,KAAKwT,qBAAsBxT,MACvEA,KAAKgT,YAAc,KACnBhT,KAAKoT,QAAU,KACfpT,KAAKkT,eAAiB,KACtBlT,KAAK0T,mBAAqB,KAC1B3T,MAAM6C,WAKV+Q,eAAe3U,EAAOyG,GAClB,OAAQA,EAAK6D,MACT,IAAK,iBACDtJ,KAAK2C,UAAU,GAAG3D,EAAME,gBAAkB,MAC1C,MACJ,IAAK,UACGF,EAAMgN,QACNhM,KAAKC,SAASmP,GAGdpP,KAAKsU,YAAYlF,IAUjCyB,kBAAkB7R,EAAOyG,GACrB,IAAIzF,KAAK8S,gBAAT,CAIA,OAAQrN,EAAKzB,KACT,IAAK,WACGhE,KAAKgU,cACLhU,KAAK4T,oBAET,MACJ,IAAK,YACG5T,KAAKwR,cACLxR,KAAK+Q,oBAMjBhR,MAAM8Q,kBAAkB7R,EAAOyG,IAKnC+N,qBAAqBhO,EAAQC,GACzB,MAAM8O,EAAiB,IAAT9O,EACdzF,KAAKqS,YAAY7C,GAAkB+E,KAM3C,SAAW5B,GA6EPA,EAAS6B,QAzETC,eAAuBhX,EAAMiX,EAAgB5M,GACzC,IAAIvH,EACJ,MAAMvB,EAAQvB,EAAKuB,MACb2V,EAAO3V,EAAMK,MAAMC,KACzB,IAAKqV,EAAKpK,UAA8C,QAAjChK,EAAKmU,EAAeE,eAA4B,IAAPrU,OAAgB,EAASA,EAAGsU,QAExF,YADA7V,EAAMkM,iBAGV,MAAM4J,EAAS,CAAEA,OAAQ9V,EAAMmI,IAC/BW,EAAW7D,OAAO0N,OAAO1N,OAAO0N,OAAO1N,OAAO0N,OAAO,GAAI3S,EAAM8I,SAASlD,UAAWkD,GAAWgN,GAC9F,MAAM,aAAEC,GAAiBjN,EAKzB,IAAIkN,EAJJhW,EAAMkM,iBACNzN,EAAKmD,cAAe,EACpBnD,EAAKkF,UAAU,KACf3D,EAAM4I,SAAU,EAEhB,IACI,MAAMqN,EAAa,EAAA5B,WAAA,QAAmBsB,EAAMlX,EAAKyX,WAAYR,EAAgB5M,GAE7E,GAAIiN,EAAc,CACd,MAAMI,EAAoBtH,IACtB,IAAIuH,EACJ,OAAQvH,EAAIkC,OAAOsF,UACf,IAAK,SACDD,EAAQ,UAAUvH,EAAIyH,QAAQC,kBAC9B,MACJ,IAAK,gBACDH,EAAQ,gBACR,MACJ,QACI,OAAO,EAIf,MAAM/V,EAAQwO,EAAIkC,OAAOyF,OAAQ,IAAIC,MAAOC,cACtCC,EAAa1R,OAAO0N,OAAO,GAAI3S,EAAM8I,SAASpD,IAAI,cAGxD,OAFAiR,EAAW,SAASP,KAAW/V,EAC/BL,EAAM8I,SAAS1D,IAAI,YAAauR,IACzB,GAEXlY,EAAKyX,WAAWF,OAAOY,oBAAoBT,QAG3CnW,EAAM8I,SAAS5C,OAAO,aAG1B8P,EAASvX,EAAKyX,WAAWF,OACzB,MAAMnH,QAAaoH,EAEnB,GADAjW,EAAME,eAAiB2O,EAAIyH,QAAQhL,gBAC/ByK,EAAc,CACd,MAAMY,EAAa1R,OAAO0N,OAAO,GAAI3S,EAAM8I,SAASpD,IAAI,cAClDmR,EAAUhI,EAAI/F,SAAS+N,QAEzBA,IACAF,EAAW,+BAAiCE,GAGhD,MAAMC,EAAWjI,EAAIkC,OAAOyF,KAC5BG,EAAW,uBACPG,IAAY,IAAIL,MAAOC,cAC3B1W,EAAM8I,SAAS1D,IAAI,YAAauR,GAEpC,OAAO9H,EAEX,MAAOzN,GAMH,MAHI4U,IAAWvX,EAAKoF,YAAcpF,EAAKyX,WAAWF,SAAWA,GACzDvX,EAAKkF,UAAU,IAEbvC,IA1ElB,CA8EGuS,KAAaA,GAAW,KAKpB,MAAMoD,WAAwBrG,GAWjCzB,YAAYjF,GACR,OAAQA,EAAM/J,MACV,IAAK,QACDe,KAAKgW,UAAUhN,GACf,MACJ,IAAK,YAGL,IAAK,WACDA,EAAMiN,iBACN,MACJ,IAAK,OACDjW,KAAKkW,eAAelN,GACpB,MACJ,IAAK,cACDhJ,KAAKmW,aAAanN,GAClB,MACJ,IAAK,UACDhJ,KAAKoW,SAASpN,IAS1B4E,cAAcC,GACV9N,MAAM6N,cAAcC,GACpB,MAAM1Q,EAAO6C,KAAK7C,KAClBA,EAAK2Q,iBAAiB,cAAe9N,MACrC7C,EAAK2Q,iBAAiB,UAAW9N,MACjC7C,EAAK2Q,iBAAiB,YAAa9N,MACnC7C,EAAK2Q,iBAAiB,WAAY9N,MAClC7C,EAAK2Q,iBAAiB,OAAQ9N,MAC9B7C,EAAK2Q,iBAAiB,QAAS9N,MAMnCqW,eAAexI,GACX,MAAM1Q,EAAO6C,KAAK7C,KAClBA,EAAK6Q,oBAAoB,OAAQhO,MACjC7C,EAAK6Q,oBAAoB,WAAYhO,MACrC7C,EAAK6Q,oBAAoB,YAAahO,MACtC7C,EAAK6Q,oBAAoB,QAAShO,MAClC7C,EAAK6Q,oBAAoB,cAAehO,MACxC7C,EAAK6Q,oBAAoB,UAAWhO,MAExCmW,aAAanN,IACiB,IAAAsN,MAAK,EAAA9P,qBAAA,WAAgCD,KACtDyC,EAAMuN,SAASC,QAAQ/G,KAGfzG,EAAMuN,SAASE,QAAQhH,IACxBzQ,MAAM0X,WAAanQ,MAKnCyC,EAAMiN,iBACNjN,EAAM2N,kBACN3N,EAAM4N,WAAa5N,EAAM6N,gBAK7Bb,UAAUhN,GACN,GAAIA,EAAM8N,cAAe,CACrB,MAAMC,EAAQ/N,EAAM8N,cAAcC,MAClC,IAAK,IAAItK,EAAI,EAAGA,EAAIsK,EAAMjY,OAAQ2N,IAAK,CACnC,GAAsB,eAAlBsK,EAAMtK,GAAGxN,KAAuB,CAEhC,GAAIwN,EAAIsK,EAAMjY,OAAS,GAA2B,SAAtBiY,EAAMtK,EAAI,GAAGuK,KACrC,SAEJD,EAAMtK,GAAGwK,aAAY3X,IACjB,IAAIiB,EAAIM,EACuC,QAA9CA,GAAMN,EAAKP,KAAK8B,QAAQoV,wBAAqC,IAAPrW,GAAyBA,EAAG+F,KAAKrG,EAAIjB,MAGpGU,KAAKmX,aAAanO,EAAM8N,cAAcC,QAG9C/N,EAAMiN,iBAKVC,eAAelN,GACPA,EAAMoO,cACNpX,KAAKmX,aAAanO,EAAMoO,aAAaL,OAEzC/N,EAAMiN,iBAKVG,SAASpN,GACL,MAAMqO,GAAqB,IAAAC,UAAQ,IAAAC,QAAOvO,EAAMuN,SAASiB,SAASjR,IAC9D,GAAIA,IAAakJ,GAAoB,CACjC,MAAMnJ,EAAO0C,EAAMuN,SAASE,QAAQhH,IACpC,OAAyE,IAAjE,EAAAjJ,qBAAA,kBAAuCF,EAAKtH,MAAM0X,UAE9D,OAA6D,IAAtD,EAAAlQ,qBAAA,kBAAuCD,OAElD,GAAkC,IAA9B8Q,EAAmBvY,OAKvB,GAFAkK,EAAMiN,iBACNjN,EAAM2N,kBACuB,SAAzB3N,EAAM6N,eAAV,CAIA7N,EAAM4N,WAAa,OACnB,IAAK,MAAMrQ,KAAY8Q,EACnB,GAAI9Q,IAAakJ,GAAoB,CACjC,MAAM,MAAEzQ,EAAK,YAAEyY,GAAgBzO,EAAMuN,SAASE,QAAQhH,IACtD,GAAmB,SAAfzQ,EAAMC,KAAiB,CACvB,MAAMyY,EAAM1X,KAAK2X,aAAa3Y,EAAMsK,MACpCtJ,KAAK4X,+BAA+B5Y,EAAMsK,KAAMoO,GAC3CD,IAAcI,MAAKC,IACpB9X,KAAKhB,MAAM6K,YAAYzF,IAAIsT,EAAK,CAC5B,CAACI,EAAUpB,UAAWoB,EAAUxC,kBAK3C,CAED,MAAMoC,EAAM1X,KAAK2X,eACjB3X,KAAKhB,MAAM6K,YAAYzF,IAAIsT,EAAK,CAC5B,CAACnR,GAAWyC,EAAMuN,SAASE,QAAQlQ,KAEvCvG,KAAK4X,+BAA+BF,EAAKA,SAvB7C1O,EAAM4N,WAAa,OA+B3BO,aAAaJ,GACT,IAAK,IAAItK,EAAI,EAAGA,EAAIsK,EAAMjY,OAAQ2N,IAAK,CACnC,MAAM1H,EAAOgS,EAAMtK,GACnB,GAAkB,SAAd1H,EAAKiS,KAAiB,CACtB,MAAMe,EAAOhT,EAAKiT,YACdD,GACA/X,KAAKiY,YAAYF,KASjCE,YAAYF,GACR,MAAMG,EAAS,IAAIC,WACnBD,EAAOE,OAASC,IACZ,MAAM,KAAEC,EAAI,SAAEC,GAAa,EAAAC,OAAA,MAAaN,EAAOO,QAC/C,GAAiB,UAAbF,EACA,OAEJ,MACMG,EADe,oDACQC,KAAKL,GAClC,IAAKI,GAA8B,IAAnBA,EAAQ5Z,OACpB,OAEJ,MAAMyH,EAAWmS,EAAQ,GAEnBE,EAAS,CAAE,CAACrS,GADEmS,EAAQ,IAEtBhB,EAAM1X,KAAK2X,aAAaI,EAAKzO,MAC/B/C,EAASN,WAAW,YACpBjG,KAAKhB,MAAM6K,YAAYzF,IAAIsT,EAAKkB,GAChC5Y,KAAK4X,+BAA+BG,EAAKzO,KAAMoO,KAGvDQ,EAAOW,QAAUR,IACbS,QAAQC,MAAM,oBAAoBhB,EAAKzO,OAAS+O,IAEpDH,EAAOc,cAAcjB,GAMzBJ,aAAarO,EAAO,IAChB,MAAM2P,EAAY3P,EAAK4P,YAAY,KACnC,OAAsB,IAAfD,EACD,EAAA7R,KAAA,QAAa+R,OAAO7P,EAAK8P,UAAUH,IACnC,EAAA7R,KAAA,SAeP,MAAMiS,WAAqBtD,GAI9BjW,YAAYsB,GACR,IAAIb,EAAIM,EACRd,MAAMqB,GACNpB,KAAKsZ,uBAAyB,IAAI,EAAA5V,OAAO1D,MACzCA,KAAKuZ,UAAY,KACjBvZ,KAAKuC,WAAY,EACjBvC,KAAKwZ,UAAY,GACjBxZ,KAAKyZ,OAAS,IAAI,EAAAC,gBAClB1Z,KAAKC,SAhhCe,mBAkhCpBD,KAAKgT,YAAc5R,EAAQ2R,WAAWlB,MAAM,CACxC8H,SAAU,IAAI9T,EAAoB,CAC9BrF,OAA+C,QAAtCD,EAAKa,EAAQ2R,WAAW4G,gBAA6B,IAAPpZ,EAAgBA,OAAK4D,EAC5EnF,MAAOgB,KAAKhB,MAAM6K,gBAI1B7J,KAAK8B,OAAOsQ,UAAU,eAAe,GAErCpS,KAAK4Z,kBAAoF,QAA9D/Y,EAAKb,KAAKhB,MAAM8I,SAASpD,IAAI2K,UAAgD,IAAPxO,GAAgBA,EAEjHb,KAAK6Z,SAAW,IAAI,EAAAC,gBAAgB,CAChCC,OAAQ/Z,KAAKhB,MAAMqI,eACnB2S,QAvgCW,MAygCfha,KAAK6Z,SAASI,gBAAgB3V,SAAQ,KAC9BtE,KAAKuC,WACLvC,KAAKU,WAEVV,MACEA,KAAKka,uBAAuBrC,MAAK,KAClC7X,KAAKyZ,OAAOlI,aAAQ,MAExBvR,KAAKma,sBAAsBna,KAAKuZ,WAChCvZ,KAAKqC,YAAYrC,KAAKuZ,WAK1B,YACI,OAAOvZ,KAAKyZ,OAAOW,QAMvB,kBACI,IAAI9a,EAAOU,KAAKhB,MAAMK,MAAMC,KAC5B,MAAM+a,EAAQ,UAAa/a,GAC3B,IAAIgb,EACJ,IAAKA,KAAQD,EAAO,CAChB,GAAkB,YAAdC,EAAKrb,KACL,MAAO,CAAEK,KAAMgb,EAAKhb,KAAMib,MAAOD,EAAKE,OAErC,GAAkB,SAAdF,EAAKrb,KAAiB,CAC3B,IAAIwb,EAAQH,EAAKI,IAAID,MAAM,+BAC3B,OAAIA,MAAAA,OAAqC,EAASA,EAAM,IAC7C,CAAEnb,KAAMmb,EAAM,GAAIF,MAAOI,SAASF,EAAM,KAE5C,CAAEnb,KAAM,GAAIib,OAAQ,IAGnC,MAAO,CAAEjb,KAAM,GAAIib,OAAQ,GAE/B,uBACI,OAAOva,KAAK4Z,kBAEhB,qBAAqBva,GACjBW,KAAK4Z,kBAAoBva,EACrBA,EACAW,KAAKhB,MAAM8I,SAAS1D,IAAIiL,EAA4BhQ,GAE/CW,KAAKhB,MAAM8I,SAAShD,IAAIuK,IAC7BrP,KAAKhB,MAAM8I,SAAS5C,OAAOmK,GAE/B,MAAMuL,EAAiB5a,KAAK6a,UAAU7c,WAAW8c,uBAAuBxL,GAAyB,GAC7FsL,GACAA,EAAeG,aAAa,QAAS,sBACzC1b,EAAQ,6BAA+B,gDAEvCW,KAAKma,sBAAsBna,KAAKuZ,WAEpC,uBACI,OAAOvZ,KAAKgb,kBAEhB,qBAAqB3b,GACjBW,KAAKgb,kBAAoB3b,EACzBW,KAAKma,sBAAsBna,KAAKuZ,WAEpC,4BACI,OAAOvZ,KAAKsZ,uBAKhB,eACI,OAAOtZ,KAAKuC,UAEhB,aAAalD,GACLA,IAAUW,KAAKuC,YAGnBvC,KAAKuC,UAAYlD,EACjBW,KAAKib,kBAIAjb,KAAKuC,WACNvC,KAAK8B,OAAOmQ,WAGpBiJ,4BACI,GAAIlb,KAAKmb,YAAYZ,MAAQ,GAEV,GADfva,KAAK6a,UAAU7c,WAAW8c,uBAAuBxL,GAC5CxQ,OAAa,CAClB,IAAI8b,EAAiB5a,KAAK6a,UAAU7c,WAAWod,YAAY/M,SAASgN,cAAc,WAClFT,EAAejb,UAAY,oEAC3Bib,EAAerM,MAAM+M,YAAgBtb,KAAK4Z,kBACpC,6BACA,6BAF4B,oBAGlCgB,EAAeW,QAAWvS,IACtBhJ,KAAKwb,kBAAoBxb,KAAKwb,iBAC9Bxb,KAAKsZ,uBAAuB5T,KAAK1F,KAAK4Z,qBAIlD6B,kCACI,IAAIlb,EAAIM,EACR,MAAM6a,EAAe1b,KAAK7C,KAAK2d,uBAjoCP,4BAmoCxB,GAAI9a,KAAKwb,kBACmB,IAAxBE,EAAa5c,QACbkB,KAAKgb,kBAAoB,EAAG,CAC5B,MAAMW,EAAmBtN,SAASgN,cAAc,UAChDM,EAAiBhc,UAAY,4DAC7B,EAAAic,QAAA,OAAeD,GACf,MAAME,EAAuBxN,SAASgN,cAAc,OACpDQ,EAAqBC,UAAY,GAAG9b,KAAKgb,yBAAyBhb,KAAKgb,kBAAoB,EAAI,IAAM,YACrGW,EAAiBP,YAAYS,GAC7BF,EAAiBJ,QAAU,KACvBvb,KAAKwb,kBAAmB,EACxBxb,KAAKsZ,uBAAuB5T,KAAK1F,KAAK4Z,oBAE1C5Z,KAAK7C,KAAKie,YAAYO,QAErB,IAAsJ,QAAhJ9a,EAA4F,QAAtFN,EAAKmb,MAAAA,OAAmD,EAASA,EAAa,UAAuB,IAAPnb,OAAgB,EAASA,EAAG4N,kBAA+B,IAAPtN,OAAgB,EAASA,EAAG/B,QAAU,EAErM,GAAIkB,KAAK4Z,kBACL8B,EAAa,GAAGvN,WAAW,GAAG/K,YAAc,GAAGpD,KAAKgb,yBAAyBhb,KAAKgb,kBAAoB,EAAI,IAAM,iBAIhH,IAAK,MAAMe,KAAML,EACb1b,KAAK7C,KAAK6e,YAAYD,GAUtC5B,sBAAsB7X,GAClBtC,KAAK7C,KAAKiR,UAAU6N,OAAO5M,EAA4BrP,KAAK4Z,mBAC5D5Z,KAAKkb,4BACLlb,KAAKyb,kCAKTpZ,YAAYC,GACRtC,KAAKC,SAASsP,GACdvP,KAAKma,sBAAsB7X,GAC3BtC,KAAK6a,UAAUxY,YAAYC,GAK/BG,aACIzC,KAAKsU,YAAY/E,GACjBvP,KAAK6a,UAAUpY,aAKnByP,gBAAgBrE,GAEZ7N,KAAKib,kBACLlb,MAAMmS,gBAAgBrE,GAK1B+J,+BAA+BsE,EAAgBxE,GAC3C,IAAInX,EAAIM,EACR,MAAMsb,EAAmB,KAAKD,iBAA8BxE,MAAAA,EAAiCA,EAAMwE,KACpD,QAA9Crb,GAAMN,EAAKP,KAAK8B,QAAQoV,wBAAqC,IAAPrW,GAAyBA,EAAG+F,KAAKrG,EAAI4b,GAKhGlB,kBACSjb,KAAKuC,WAMDvC,KAAKka,uBACVla,KAAKqC,YAAYrC,KAAKuZ,YANtBvZ,KAAKyC,aAYbyX,uBACI,MAAMlb,EAAQgB,KAAKhB,MACbM,EAAQN,GAASA,EAAMK,MAAMC,MA9sCb,mCAgtCtB,GAAIA,IAASU,KAAKwZ,UAAW,CACzB,MAAM4C,EAAY,IAAI,EAAAC,UAAU,CAAE/V,KAAM,CAAE,gBAAiBhH,KAM3D,OALKU,KAAKuZ,YACNvZ,KAAKuZ,UAAYvZ,KAAKgT,YAAYsJ,eAAe,iBACjDtc,KAAKuZ,UAAUtZ,SApuCD,sBAsuClBD,KAAKwZ,UAAYla,EACVU,KAAKuZ,UAAUgD,YAAYH,GAEtC,OAAO9K,QAAQC,aAAQ,GAK3BM,QAEI,OAAO,IAAI/R,EADSE,KAAKF,aACF,CACnBd,MAAOgB,KAAKhB,MACZqC,eAAgBrB,KAAKqB,eACrB0R,WAAY/S,KAAKgT,YACjB5Q,aAAa,KAUlB,MAAMoa,WAAgB9M,GAIzB5P,YAAYsB,GACRrB,MAAMqB,GACNpB,KAAKC,SA7vCU,cAkwCnB4R,QAEI,OAAO,IAAI/R,EADSE,KAAKF,aACF,CACnBd,MAAOgB,KAAKhB,MACZqC,eAAgBrB,KAAKqB,eACrBe,aAAa","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/cells/lib/celldragutils.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/cells/lib/collapser.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/cells/lib/headerfooter.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/cells/lib/inputarea.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/attachments/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/cells/lib/model.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/cells/lib/placeholder.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/cells/lib/resizeHandle.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/cells/lib/widget.js"],"sourcesContent":["/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\n/**\n * This module contains some utility functions to operate on cells. This\n * could be shared by widgets that contain cells, like the CodeConsole or\n * Notebook widgets.\n */\nimport { each } from '@lumino/algorithm';\nimport { h, VirtualDOM } from '@lumino/virtualdom';\n/**\n * Constants for drag\n */\n/**\n * The threshold in pixels to start a drag event.\n */\nconst DRAG_THRESHOLD = 5;\n/**\n * The class name added to drag images.\n */\nconst DRAG_IMAGE_CLASS = 'jp-dragImage';\n/**\n * The class name added to singular drag images\n */\nconst SINGLE_DRAG_IMAGE_CLASS = 'jp-dragImage-singlePrompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_CONTENT_CLASS = 'jp-dragImage-content';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_PROMPT_CLASS = 'jp-dragImage-prompt';\n/**\n * The class name added to the drag image cell content.\n */\nconst CELL_DRAG_MULTIPLE_BACK = 'jp-dragImage-multipleBack';\nexport var CellDragUtils;\n(function (CellDragUtils) {\n    /**\n     * Find the cell index containing the target html element.\n     * This function traces up the DOM hierarchy to find the root cell\n     * node. Then find the corresponding child and select it.\n     *\n     * @param node - the cell node or a child of the cell node.\n     * @param cells - an iterable of Cells\n     * @param isCellNode - a function that takes in a node and checks if\n     * it is a cell node.\n     *\n     * @returns index of the cell we're looking for. Returns -1 if\n     * the cell is not founds\n     */\n    function findCell(node, cells, isCellNode) {\n        let cellIndex = -1;\n        while (node && node.parentElement) {\n            if (isCellNode(node)) {\n                each(cells, (cell, index) => {\n                    if (cell.node === node) {\n                        cellIndex = index;\n                        return false;\n                    }\n                });\n                break;\n            }\n            node = node.parentElement;\n        }\n        return cellIndex;\n    }\n    CellDragUtils.findCell = findCell;\n    /**\n     * Detect which part of the cell triggered the MouseEvent\n     *\n     * @param cell - The cell which contains the MouseEvent's target\n     * @param target - The DOM node which triggered the MouseEvent\n     */\n    function detectTargetArea(cell, target) {\n        let targetArea;\n        if (cell) {\n            if (cell.editorWidget.node.contains(target)) {\n                targetArea = 'input';\n            }\n            else if (cell.promptNode.contains(target)) {\n                targetArea = 'prompt';\n            }\n            else {\n                targetArea = 'cell';\n            }\n        }\n        else {\n            targetArea = 'unknown';\n        }\n        return targetArea;\n    }\n    CellDragUtils.detectTargetArea = detectTargetArea;\n    /**\n     * Detect if a drag event should be started. This is down if the\n     * mouse is moved beyond a certain distance (DRAG_THRESHOLD).\n     *\n     * @param prevX - X Coordinate of the mouse pointer during the mousedown event\n     * @param prevY - Y Coordinate of the mouse pointer during the mousedown event\n     * @param nextX - Current X Coordinate of the mouse pointer\n     * @param nextY - Current Y Coordinate of the mouse pointer\n     */\n    function shouldStartDrag(prevX, prevY, nextX, nextY) {\n        const dx = Math.abs(nextX - prevX);\n        const dy = Math.abs(nextY - prevY);\n        return dx >= DRAG_THRESHOLD || dy >= DRAG_THRESHOLD;\n    }\n    CellDragUtils.shouldStartDrag = shouldStartDrag;\n    /**\n     * Create an image for the cell(s) to be dragged\n     *\n     * @param activeCell - The cell from where the drag event is triggered\n     * @param selectedCells - The cells to be dragged\n     */\n    function createCellDragImage(activeCell, selectedCells) {\n        const count = selectedCells.length;\n        let promptNumber;\n        if (activeCell.model.type === 'code') {\n            const executionCount = activeCell.model\n                .executionCount;\n            promptNumber = ' ';\n            if (executionCount) {\n                promptNumber = executionCount.toString();\n            }\n        }\n        else {\n            promptNumber = '';\n        }\n        const cellContent = activeCell.model.value.text.split('\\n')[0].slice(0, 26);\n        if (count > 1) {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: DRAG_IMAGE_CLASS }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent)), h.div({ className: CELL_DRAG_MULTIPLE_BACK }, '')));\n            }\n        }\n        else {\n            if (promptNumber !== '') {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }, '[' + promptNumber + ']:'), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n            else {\n                return VirtualDOM.realize(h.div(h.div({ className: `${DRAG_IMAGE_CLASS} ${SINGLE_DRAG_IMAGE_CLASS}` }, h.span({ className: CELL_DRAG_PROMPT_CLASS }), h.span({ className: CELL_DRAG_CONTENT_CLASS }, cellContent))));\n            }\n        }\n    }\n    CellDragUtils.createCellDragImage = createCellDragImage;\n})(CellDragUtils || (CellDragUtils = {}));\n//# sourceMappingURL=celldragutils.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { ElementExt } from '@lumino/domutils';\nimport * as React from 'react';\n/**\n * The CSS class added to all collapsers.\n */\nconst COLLAPSER_CLASS = 'jp-Collapser';\n/**\n * The CSS class added to the collapser child.\n */\nconst COLLAPSER_CHILD_CLASS = 'jp-Collapser-child';\n/**\n * The CSS class added to input collapsers.\n */\nconst INPUT_COLLAPSER = 'jp-InputCollapser';\n/**\n * The CSS class added to output collapsers.\n */\nconst OUTPUT_COLLAPSER = 'jp-OutputCollapser';\n/**\n * Abstract collapser base class.\n *\n * ### Notes\n * A collapser is a visible div to the left of a cell's\n * input/output that a user can click on to collapse the\n * input/output.\n */\nexport class Collapser extends ReactWidget {\n    /**\n     * Construct a new collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(COLLAPSER_CLASS);\n    }\n    /**\n     * Is the input/output of the parent collapsed.\n     */\n    get collapsed() {\n        return false;\n    }\n    /**\n     * Render the collapser with the virtual DOM.\n     */\n    render() {\n        const childClass = COLLAPSER_CHILD_CLASS;\n        return React.createElement(\"div\", { className: childClass, onClick: e => this.handleClick(e) });\n    }\n}\n/**\n * A collapser subclass to collapse a cell's input area.\n */\nexport class InputCollapser extends Collapser {\n    /**\n     * Construct a new input collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(INPUT_COLLAPSER);\n    }\n    /**\n     * Is the cell's input collapsed?\n     */\n    get collapsed() {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            return cell.inputHidden;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Handle a click event for the user to collapse the cell's input.\n     */\n    handleClick(e) {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            cell.inputHidden = !cell.inputHidden;\n        }\n        /* We need this until we watch the cell state */\n        this.update();\n    }\n}\n/**\n * A collapser subclass to collapse a cell's output area.\n */\nexport class OutputCollapser extends Collapser {\n    /**\n     * Construct a new output collapser.\n     */\n    constructor() {\n        super();\n        this.addClass(OUTPUT_COLLAPSER);\n    }\n    /**\n     * Is the cell's output collapsed?\n     */\n    get collapsed() {\n        var _a;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            return cell.outputHidden;\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Handle a click event for the user to collapse the cell's output.\n     */\n    handleClick(e) {\n        var _a, _b;\n        const cell = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.parent;\n        if (cell) {\n            cell.outputHidden = !cell.outputHidden;\n            /* Scroll cell into view after output collapse */\n            if (cell.outputHidden) {\n                let area = (_b = cell.parent) === null || _b === void 0 ? void 0 : _b.node;\n                if (area) {\n                    ElementExt.scrollIntoViewIfNeeded(area, cell.node);\n                }\n            }\n        }\n        /* We need this until we watch the cell state */\n        this.update();\n    }\n}\n//# sourceMappingURL=collapser.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { Widget } from '@lumino/widgets';\n/**\n * The CSS class added to the cell header.\n */\nconst CELL_HEADER_CLASS = 'jp-CellHeader';\n/**\n * The CSS class added to the cell footer.\n */\nconst CELL_FOOTER_CLASS = 'jp-CellFooter';\n/**\n * Default implementation of a cell header.\n */\nexport class CellHeader extends Widget {\n    /**\n     * Construct a new cell header.\n     */\n    constructor() {\n        super();\n        this.addClass(CELL_HEADER_CLASS);\n    }\n}\n/**\n * Default implementation of a cell footer.\n */\nexport class CellFooter extends Widget {\n    /**\n     * Construct a new cell footer.\n     */\n    constructor() {\n        super();\n        this.addClass(CELL_FOOTER_CLASS);\n    }\n}\n//# sourceMappingURL=headerfooter.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport { PanelLayout } from '@lumino/widgets';\nimport { Widget } from '@lumino/widgets';\nimport { CodeEditorWrapper } from '@jupyterlab/codeeditor';\nimport { CodeMirrorEditorFactory } from '@jupyterlab/codemirror';\n/**\n * The class name added to input area widgets.\n */\nconst INPUT_AREA_CLASS = 'jp-InputArea';\n/**\n * The class name added to the prompt area of cell.\n */\nconst INPUT_AREA_PROMPT_CLASS = 'jp-InputArea-prompt';\n/**\n * The class name added to OutputPrompt.\n */\nconst INPUT_PROMPT_CLASS = 'jp-InputPrompt';\n/**\n * The class name added to the editor area of the cell.\n */\nconst INPUT_AREA_EDITOR_CLASS = 'jp-InputArea-editor';\n/** ****************************************************************************\n * InputArea\n ******************************************************************************/\n/**\n * An input area widget, which hosts a prompt and an editor widget.\n */\nexport class InputArea extends Widget {\n    /**\n     * Construct an input area widget.\n     */\n    constructor(options) {\n        super();\n        this.addClass(INPUT_AREA_CLASS);\n        const model = (this.model = options.model);\n        const contentFactory = (this.contentFactory =\n            options.contentFactory || InputArea.defaultContentFactory);\n        // Prompt\n        const prompt = (this._prompt = contentFactory.createInputPrompt());\n        prompt.addClass(INPUT_AREA_PROMPT_CLASS);\n        // Editor\n        const editorOptions = {\n            model,\n            factory: contentFactory.editorFactory,\n            updateOnShow: options.updateOnShow\n        };\n        const editor = (this._editor = new CodeEditorWrapper(editorOptions));\n        editor.addClass(INPUT_AREA_EDITOR_CLASS);\n        const layout = (this.layout = new PanelLayout());\n        layout.addWidget(prompt);\n        if (!options.placeholder) {\n            layout.addWidget(editor);\n        }\n    }\n    /**\n     * Get the CodeEditorWrapper used by the cell.\n     */\n    get editorWidget() {\n        return this._editor;\n    }\n    /**\n     * Get the CodeEditor used by the cell.\n     */\n    get editor() {\n        return this._editor.editor;\n    }\n    /**\n     * Get the prompt node used by the cell.\n     */\n    get promptNode() {\n        return this._prompt.node;\n    }\n    /**\n     * Render an input instead of the text editor.\n     */\n    renderInput(widget) {\n        const layout = this.layout;\n        if (this._rendered) {\n            this._rendered.parent = null;\n        }\n        this._editor.hide();\n        this._rendered = widget;\n        layout.addWidget(widget);\n    }\n    /**\n     * Show the text editor.\n     */\n    showEditor() {\n        if (this._rendered) {\n            this._rendered.parent = null;\n        }\n        this._editor.show();\n    }\n    /**\n     * Set the prompt of the input area.\n     */\n    setPrompt(value) {\n        this._prompt.executionCount = value;\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._prompt = null;\n        this._editor = null;\n        this._rendered = null;\n        super.dispose();\n    }\n}\n/**\n * A namespace for `InputArea` statics.\n */\n(function (InputArea) {\n    /**\n     * Default implementation of `IContentFactory`.\n     *\n     * This defaults to using an `editorFactory` based on CodeMirror.\n     */\n    class ContentFactory {\n        /**\n         * Construct a `ContentFactory`.\n         */\n        constructor(options = {}) {\n            this._editor = options.editorFactory || InputArea.defaultEditorFactory;\n        }\n        /**\n         * Return the `CodeEditor.Factory` being used.\n         */\n        get editorFactory() {\n            return this._editor;\n        }\n        /**\n         * Create an input prompt.\n         */\n        createInputPrompt() {\n            return new InputPrompt();\n        }\n    }\n    InputArea.ContentFactory = ContentFactory;\n    /**\n     * A function to create the default CodeMirror editor factory.\n     */\n    function _createDefaultEditorFactory() {\n        const editorServices = new CodeMirrorEditorFactory();\n        return editorServices.newInlineEditor;\n    }\n    /**\n     * The default editor factory singleton based on CodeMirror.\n     */\n    InputArea.defaultEditorFactory = _createDefaultEditorFactory();\n    /**\n     * The default `ContentFactory` instance.\n     */\n    InputArea.defaultContentFactory = new ContentFactory({});\n})(InputArea || (InputArea = {}));\n/**\n * The default input prompt implementation.\n */\nexport class InputPrompt extends Widget {\n    /*\n     * Create an output prompt widget.\n     */\n    constructor() {\n        super();\n        this._executionCount = null;\n        this.addClass(INPUT_PROMPT_CLASS);\n    }\n    /**\n     * The execution count for the prompt.\n     */\n    get executionCount() {\n        return this._executionCount;\n    }\n    set executionCount(value) {\n        this._executionCount = value;\n        if (value === null) {\n            this.node.textContent = ' ';\n        }\n        else {\n            this.node.textContent = `[${value || ' '}]:`;\n        }\n    }\n}\n//# sourceMappingURL=inputarea.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ObservableMap } from '@jupyterlab/observables';\nimport { AttachmentModel, imageRendererFactory } from '@jupyterlab/rendermime';\nimport { Signal } from '@lumino/signaling';\n/**\n * The default implementation of the IAttachmentsModel.\n */\nexport class AttachmentsModel {\n    /**\n     * Construct a new observable outputs instance.\n     */\n    constructor(options = {}) {\n        this._map = new ObservableMap();\n        this._isDisposed = false;\n        this._stateChanged = new Signal(this);\n        this._changed = new Signal(this);\n        this._modelDB = null;\n        this._serialized = null;\n        this._changeGuard = false;\n        this.contentFactory =\n            options.contentFactory || AttachmentsModel.defaultContentFactory;\n        if (options.values) {\n            for (const key of Object.keys(options.values)) {\n                if (options.values[key] !== undefined) {\n                    this.set(key, options.values[key]);\n                }\n            }\n        }\n        this._map.changed.connect(this._onMapChanged, this);\n        // If we are given a IModelDB, keep an up-to-date\n        // serialized copy of the AttachmentsModel in it.\n        if (options.modelDB) {\n            this._modelDB = options.modelDB;\n            this._serialized = this._modelDB.createValue('attachments');\n            if (this._serialized.get()) {\n                this.fromJSON(this._serialized.get());\n            }\n            else {\n                this._serialized.set(this.toJSON());\n            }\n            this._serialized.changed.connect(this._onSerializedChanged, this);\n        }\n    }\n    /**\n     * A signal emitted when the model state changes.\n     */\n    get stateChanged() {\n        return this._stateChanged;\n    }\n    /**\n     * A signal emitted when the model changes.\n     */\n    get changed() {\n        return this._changed;\n    }\n    /**\n     * The keys of the attachments in the model.\n     */\n    get keys() {\n        return this._map.keys();\n    }\n    /**\n     * Get the length of the items in the model.\n     */\n    get length() {\n        return this._map.keys().length;\n    }\n    /**\n     * Test whether the model is disposed.\n     */\n    get isDisposed() {\n        return this._isDisposed;\n    }\n    /**\n     * Dispose of the resources used by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._isDisposed = true;\n        this._map.dispose();\n        Signal.clearData(this);\n    }\n    /**\n     * Whether the specified key is set.\n     */\n    has(key) {\n        return this._map.has(key);\n    }\n    /**\n     * Get an item at the specified key.\n     */\n    get(key) {\n        return this._map.get(key);\n    }\n    /**\n     * Set the value at the specified key.\n     */\n    set(key, value) {\n        // Normalize stream data.\n        const item = this._createItem({ value });\n        this._map.set(key, item);\n    }\n    /**\n     * Remove the attachment whose name is the specified key\n     */\n    remove(key) {\n        this._map.delete(key);\n    }\n    /**\n     * Clear all of the attachments.\n     */\n    clear() {\n        this._map.values().forEach((item) => {\n            item.dispose();\n        });\n        this._map.clear();\n    }\n    /**\n     * Deserialize the model from JSON.\n     *\n     * #### Notes\n     * This will clear any existing data.\n     */\n    fromJSON(values) {\n        this.clear();\n        Object.keys(values).forEach(key => {\n            if (values[key] !== undefined) {\n                this.set(key, values[key]);\n            }\n        });\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const ret = {};\n        for (const key of this._map.keys()) {\n            ret[key] = this._map.get(key).toJSON();\n        }\n        return ret;\n    }\n    /**\n     * Create an attachment item and hook up its signals.\n     */\n    _createItem(options) {\n        const factory = this.contentFactory;\n        const item = factory.createAttachmentModel(options);\n        item.changed.connect(this._onGenericChange, this);\n        return item;\n    }\n    /**\n     * Handle a change to the list.\n     */\n    _onMapChanged(sender, args) {\n        if (this._serialized && !this._changeGuard) {\n            this._changeGuard = true;\n            this._serialized.set(this.toJSON());\n            this._changeGuard = false;\n        }\n        this._changed.emit(args);\n        this._stateChanged.emit(void 0);\n    }\n    /**\n     * If the serialized version of the outputs have changed due to a remote\n     * action, then update the model accordingly.\n     */\n    _onSerializedChanged(sender, args) {\n        if (!this._changeGuard) {\n            this._changeGuard = true;\n            this.fromJSON(args.newValue);\n            this._changeGuard = false;\n        }\n    }\n    /**\n     * Handle a change to an item.\n     */\n    _onGenericChange() {\n        this._stateChanged.emit(void 0);\n    }\n}\n/**\n * The namespace for AttachmentsModel class statics.\n */\n(function (AttachmentsModel) {\n    /**\n     * The default implementation of a `IAttachmentsModel.IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an attachment model.\n         */\n        createAttachmentModel(options) {\n            return new AttachmentModel(options);\n        }\n    }\n    AttachmentsModel.ContentFactory = ContentFactory;\n    /**\n     * The default attachment model factory.\n     */\n    AttachmentsModel.defaultContentFactory = new ContentFactory();\n})(AttachmentsModel || (AttachmentsModel = {}));\n/**\n * A resolver for cell attachments 'attachment:filename'.\n *\n * Will resolve to a data: url.\n */\nexport class AttachmentsResolver {\n    /**\n     * Create an attachments resolver object.\n     */\n    constructor(options) {\n        this._parent = options.parent || null;\n        this._model = options.model;\n    }\n    /**\n     * Resolve a relative url to a correct server path.\n     */\n    async resolveUrl(url) {\n        if (this._parent && !url.startsWith('attachment:')) {\n            return this._parent.resolveUrl(url);\n        }\n        return url;\n    }\n    /**\n     * Get the download url of a given absolute server path.\n     *\n     * #### Notes\n     * The returned URL may include a query parameter.\n     */\n    async getDownloadUrl(path) {\n        if (this._parent && !path.startsWith('attachment:')) {\n            return this._parent.getDownloadUrl(path);\n        }\n        // Return a data URL with the data of the url\n        const key = path.slice('attachment:'.length);\n        const attachment = this._model.get(key);\n        if (attachment === undefined) {\n            // Resolve with unprocessed path, to show as broken image\n            return path;\n        }\n        const { data } = attachment;\n        const mimeType = Object.keys(data)[0];\n        // Only support known safe types:\n        if (mimeType === undefined ||\n            imageRendererFactory.mimeTypes.indexOf(mimeType) === -1) {\n            throw new Error(`Cannot render unknown image mime type \"${mimeType}\".`);\n        }\n        const dataUrl = `data:${mimeType};base64,${data[mimeType]}`;\n        return dataUrl;\n    }\n    /**\n     * Whether the URL should be handled by the resolver\n     * or not.\n     */\n    isLocal(url) {\n        var _a, _b, _c;\n        if (this._parent && !url.startsWith('attachment:')) {\n            return (_c = (_b = (_a = this._parent).isLocal) === null || _b === void 0 ? void 0 : _b.call(_a, url)) !== null && _c !== void 0 ? _c : true;\n        }\n        return true;\n    }\n}\n//# sourceMappingURL=model.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { JSONExt } from '@lumino/coreutils';\nimport { Signal } from '@lumino/signaling';\nimport { AttachmentsModel } from '@jupyterlab/attachments';\nimport { CodeEditor } from '@jupyterlab/codeeditor';\nimport * as models from '@jupyterlab/shared-models';\nimport { UUID } from '@lumino/coreutils';\nimport { OutputAreaModel } from '@jupyterlab/outputarea';\nexport function isCodeCellModel(model) {\n    return model.type === 'code';\n}\nexport function isMarkdownCellModel(model) {\n    return model.type === 'markdown';\n}\nexport function isRawCellModel(model) {\n    return model.type === 'raw';\n}\n/**\n * An implementation of the cell model.\n */\nexport class CellModel extends CodeEditor.Model {\n    /**\n     * Construct a cell model from optional cell content.\n     */\n    constructor(options) {\n        var _a;\n        super({\n            modelDB: options.modelDB,\n            id: options.id || ((_a = options.cell) === null || _a === void 0 ? void 0 : _a.id) || UUID.uuid4()\n        });\n        /**\n         * A signal emitted when the state of the model changes.\n         */\n        this.contentChanged = new Signal(this);\n        /**\n         * A signal emitted when a model state changes.\n         */\n        this.stateChanged = new Signal(this);\n        /**\n         * A mutex to update the shared model.\n         */\n        this._modelDBMutex = models.createMutex();\n        this.value.changed.connect(this.onGenericChange, this);\n        const cellType = this.modelDB.createValue('type');\n        cellType.set(this.type);\n        const observableMetadata = this.modelDB.createMap('metadata');\n        observableMetadata.changed.connect(this.onModelDBMetadataChange, this);\n        observableMetadata.changed.connect(this.onGenericChange, this);\n        const cell = options.cell;\n        const trusted = this.modelDB.createValue('trusted');\n        trusted.changed.connect(this.onTrustedChanged, this);\n        if (!cell) {\n            trusted.set(false);\n            return;\n        }\n        trusted.set(!!cell.metadata['trusted']);\n        delete cell.metadata['trusted'];\n        // Set the text value, normalizing line endings to \\n\n        if (Array.isArray(cell.source)) {\n            this.value.text = cell.source\n                .map(s => s.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n'))\n                .join('');\n        }\n        else {\n            this.value.text = cell.source.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n        }\n        const metadata = JSONExt.deepCopy(cell.metadata);\n        if (this.type !== 'raw') {\n            delete metadata['format'];\n        }\n        if (this.type !== 'code') {\n            delete metadata['collapsed'];\n            delete metadata['scrolled'];\n        }\n        for (const key in metadata) {\n            observableMetadata.set(key, metadata[key]);\n        }\n    }\n    /**\n     * The type of cell.\n     */\n    get type() {\n        // This getter really should be abstract, but our current constructor\n        // depends on .type working\n        return 'raw';\n    }\n    /**\n     * The id for the cell.\n     */\n    get id() {\n        return this.sharedModel.getId();\n    }\n    /**\n     * The metadata associated with the cell.\n     */\n    get metadata() {\n        return this.modelDB.get('metadata');\n    }\n    /**\n     * Get the trusted state of the model.\n     */\n    get trusted() {\n        return this.modelDB.getValue('trusted');\n    }\n    /**\n     * Set the trusted state of the model.\n     */\n    set trusted(newValue) {\n        const oldValue = this.trusted;\n        if (oldValue === newValue) {\n            return;\n        }\n        this.modelDB.setValue('trusted', newValue);\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const metadata = Object.create(null);\n        for (const key of this.metadata.keys()) {\n            const value = JSON.parse(JSON.stringify(this.metadata.get(key)));\n            metadata[key] = value;\n        }\n        if (this.trusted) {\n            metadata['trusted'] = true;\n        }\n        return {\n            cell_type: this.type,\n            source: this.value.text,\n            metadata\n        };\n    }\n    /**\n     * Handle a change to the trusted state.\n     *\n     * The default implementation is a no-op.\n     */\n    onTrustedChanged(trusted, args) {\n        /* no-op */\n    }\n    /**\n     * Handle a change to the cell metadata modelDB and reflect it in the shared model.\n     */\n    onModelDBMetadataChange(sender, event) {\n        const metadata = this.sharedModel.getMetadata();\n        this._modelDBMutex(() => {\n            switch (event.type) {\n                case 'add':\n                    this._changeCellMetadata(metadata, event);\n                    break;\n                case 'change':\n                    this._changeCellMetadata(metadata, event);\n                    break;\n                case 'remove':\n                    delete metadata[event.key];\n                    break;\n                default:\n                    throw new Error(`Invalid event type: ${event.type}`);\n            }\n            this.sharedModel.setMetadata(metadata);\n        });\n    }\n    /**\n     * Change the cell metadata for a given event.\n     *\n     * @param metadata The cell metadata.\n     * @param event The event to handle.\n     */\n    _changeCellMetadata(metadata, event) {\n        switch (event.key) {\n            case 'jupyter':\n                metadata.jupyter = event.newValue;\n                break;\n            case 'collapsed':\n                metadata.collapsed = event.newValue;\n                break;\n            case 'name':\n                metadata.name = event.newValue;\n                break;\n            case 'scrolled':\n                metadata.scrolled = event.newValue;\n                break;\n            case 'tags':\n                metadata.tags = event.newValue;\n                break;\n            case 'trusted':\n                metadata.trusted = event.newValue;\n                break;\n            default:\n                // The default is applied for custom metadata that are not\n                // defined in the official nbformat but which are defined\n                // by the user.\n                metadata[event.key] = event.newValue;\n        }\n    }\n    /**\n     * Handle a change to the cell shared model and reflect it in modelDB.\n     * We update the modeldb metadata when the shared model changes.\n     *\n     * This method overrides the CodeEditor protected _onSharedModelChanged\n     * so we first call super._onSharedModelChanged\n     *\n     * @override CodeEditor._onSharedModelChanged\n     */\n    _onSharedModelChanged(sender, change) {\n        super._onSharedModelChanged(sender, change);\n        this._modelDBMutex(() => {\n            var _a;\n            if (change.metadataChange) {\n                const newValue = (_a = change.metadataChange) === null || _a === void 0 ? void 0 : _a.newValue;\n                if (newValue) {\n                    Object.keys(newValue).map(key => {\n                        switch (key) {\n                            case 'collapsed':\n                                this.metadata.set('collapsed', newValue.jupyter);\n                                break;\n                            case 'jupyter':\n                                this.metadata.set('jupyter', newValue.jupyter);\n                                break;\n                            case 'name':\n                                this.metadata.set('name', newValue.name);\n                                break;\n                            case 'scrolled':\n                                this.metadata.set('scrolled', newValue.scrolled);\n                                break;\n                            case 'tags':\n                                this.metadata.set('tags', newValue.tags);\n                                break;\n                            case 'trusted':\n                                this.metadata.set('trusted', newValue.trusted);\n                                break;\n                            default:\n                                // The default is applied for custom metadata that are not\n                                // defined in the official nbformat but which are defined\n                                // by the user.\n                                this.metadata.set(key, newValue[key]);\n                        }\n                    });\n                }\n            }\n        });\n    }\n    /**\n     * Handle a change to the observable value.\n     */\n    onGenericChange() {\n        this.contentChanged.emit(void 0);\n    }\n}\n/**\n * A base implementation for cell models with attachments.\n */\nexport class AttachmentsCellModel extends CellModel {\n    /**\n     * Construct a new cell with optional attachments.\n     */\n    constructor(options) {\n        super(options);\n        const factory = options.contentFactory || AttachmentsCellModel.defaultContentFactory;\n        let attachments;\n        const cell = options.cell;\n        if (cell && (cell.cell_type === 'raw' || cell.cell_type === 'markdown')) {\n            attachments = cell\n                .attachments;\n        }\n        this._attachments = factory.createAttachmentsModel({\n            values: attachments,\n            modelDB: this.modelDB\n        });\n        this._attachments.stateChanged.connect(this.onGenericChange, this);\n    }\n    /**\n     * Get the attachments of the model.\n     */\n    get attachments() {\n        return this._attachments;\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        if (this.attachments.length) {\n            cell.attachments = this.attachments.toJSON();\n        }\n        return cell;\n    }\n}\n/**\n * The namespace for `AttachmentsCellModel` statics.\n */\n(function (AttachmentsCellModel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an attachments model.\n         */\n        createAttachmentsModel(options) {\n            return new AttachmentsModel(options);\n        }\n    }\n    AttachmentsCellModel.ContentFactory = ContentFactory;\n    /**\n     * The shared `ContentFactory` instance.\n     */\n    AttachmentsCellModel.defaultContentFactory = new ContentFactory();\n})(AttachmentsCellModel || (AttachmentsCellModel = {}));\n/**\n * An implementation of a raw cell model.\n */\nexport class RawCellModel extends AttachmentsCellModel {\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'raw';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        cell.id = this.id;\n        return cell;\n    }\n}\n/**\n * An implementation of a markdown cell model.\n */\nexport class MarkdownCellModel extends AttachmentsCellModel {\n    /**\n     * Construct a markdown cell model from optional cell content.\n     */\n    constructor(options) {\n        super(options);\n        // Use the Github-flavored markdown mode.\n        this.mimeType = 'text/x-ipythongfm';\n    }\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'markdown';\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        cell.id = this.id;\n        return cell;\n    }\n}\n/**\n * An implementation of a code cell Model.\n */\nexport class CodeCellModel extends CellModel {\n    /**\n     * Construct a new code cell with optional original cell content.\n     */\n    constructor(options) {\n        var _a;\n        super(options);\n        this._executedCode = '';\n        this._isDirty = false;\n        const factory = options.contentFactory || CodeCellModel.defaultContentFactory;\n        const trusted = this.trusted;\n        const cell = options.cell;\n        let outputs = [];\n        const executionCount = this.modelDB.createValue('executionCount');\n        if (!executionCount.get()) {\n            if (cell && cell.cell_type === 'code') {\n                executionCount.set(cell.execution_count || null);\n                outputs = (_a = cell.outputs) !== null && _a !== void 0 ? _a : [];\n                // If execution count is not null presume the input code was the latest executed\n                // TODO load from the notebook file when the dirty state is stored in it\n                if (cell.execution_count != null) {\n                    // True if execution_count is null or undefined\n                    this._executedCode = this.value.text.trim();\n                }\n            }\n            else {\n                executionCount.set(null);\n            }\n        }\n        executionCount.changed.connect(this._onExecutionCountChanged, this);\n        this._modelDBMutex(() => {\n            const sharedCell = this.sharedModel;\n            sharedCell.setOutputs(outputs);\n        });\n        this._outputs = factory.createOutputArea({ trusted, values: outputs });\n        this._outputs.changed.connect(this.onGenericChange, this);\n        this._outputs.changed.connect(this.onModelDBOutputsChange, this);\n        // We keep `collapsed` and `jupyter.outputs_hidden` metadata in sync, since\n        // they are redundant in nbformat 4.4. See\n        // https://github.com/jupyter/nbformat/issues/137\n        this.metadata.changed.connect(Private.collapseChanged, this);\n        // Sync `collapsed` and `jupyter.outputs_hidden` for the first time, giving\n        // preference to `collapsed`.\n        if (this.metadata.has('collapsed')) {\n            const collapsed = this.metadata.get('collapsed');\n            Private.collapseChanged(this.metadata, {\n                type: 'change',\n                key: 'collapsed',\n                oldValue: collapsed,\n                newValue: collapsed\n            });\n        }\n        else if (this.metadata.has('jupyter')) {\n            const jupyter = this.metadata.get('jupyter');\n            if (jupyter.hasOwnProperty('outputs_hidden')) {\n                Private.collapseChanged(this.metadata, {\n                    type: 'change',\n                    key: 'jupyter',\n                    oldValue: jupyter,\n                    newValue: jupyter\n                });\n            }\n        }\n    }\n    switchSharedModel(sharedModel, reinitialize) {\n        if (reinitialize) {\n            this.clearExecution();\n            sharedModel.getOutputs().forEach(output => this._outputs.add(output));\n        }\n        super.switchSharedModel(sharedModel, reinitialize);\n    }\n    /**\n     * The type of the cell.\n     */\n    get type() {\n        return 'code';\n    }\n    /**\n     * The execution count of the cell.\n     */\n    get executionCount() {\n        return this.modelDB.has('executionCount')\n            ? this.modelDB.getValue('executionCount')\n            : null;\n    }\n    set executionCount(newValue) {\n        const oldValue = this.executionCount;\n        if (newValue === oldValue) {\n            return;\n        }\n        this.modelDB.setValue('executionCount', newValue || null);\n    }\n    /**\n     * Whether the cell is dirty or not.\n     *\n     * A cell is dirty if it is output is not empty and does not\n     * result of the input code execution.\n     */\n    get isDirty() {\n        // Test could be done dynamically with this._executedCode\n        // but for performance reason, the diff status is stored in a boolean.\n        return this._isDirty;\n    }\n    /**\n     * Set whether the cell is dirty or not.\n     */\n    _setDirty(v) {\n        if (v !== this._isDirty) {\n            if (!v) {\n                this._executedCode = this.value.text.trim();\n            }\n            this._isDirty = v;\n            this.stateChanged.emit({\n                name: 'isDirty',\n                oldValue: !v,\n                newValue: v\n            });\n        }\n    }\n    clearExecution() {\n        this.outputs.clear();\n        this.executionCount = null;\n        this._setDirty(false);\n        this.metadata.delete('execution');\n    }\n    /**\n     * The cell outputs.\n     */\n    get outputs() {\n        return this._outputs;\n    }\n    /**\n     * Dispose of the resources held by the model.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._outputs.dispose();\n        this._outputs = null;\n        super.dispose();\n    }\n    /**\n     * Serialize the model to JSON.\n     */\n    toJSON() {\n        const cell = super.toJSON();\n        cell.execution_count = this.executionCount || null;\n        cell.outputs = this.outputs.toJSON();\n        cell.id = this.id;\n        return cell;\n    }\n    /**\n     * Handle a change to the trusted state.\n     */\n    onTrustedChanged(trusted, args) {\n        if (this._outputs) {\n            this._outputs.trusted = args.newValue;\n        }\n        this.stateChanged.emit({\n            name: 'trusted',\n            oldValue: args.oldValue,\n            newValue: args.newValue\n        });\n    }\n    /**\n     * Handle a change to the cell outputs modelDB and reflect it in the shared model.\n     */\n    onModelDBOutputsChange(sender, event) {\n        const codeCell = this.sharedModel;\n        this._modelDBMutex(() => {\n            switch (event.type) {\n                case 'add': {\n                    const outputs = event.newValues.map(output => output.toJSON());\n                    codeCell.updateOutputs(event.newIndex, event.newIndex + outputs.length, outputs);\n                    break;\n                }\n                case 'set': {\n                    const newValues = event.newValues.map(output => output.toJSON());\n                    codeCell.updateOutputs(event.oldIndex, event.oldValues.length, newValues);\n                    break;\n                }\n                case 'remove':\n                    codeCell.updateOutputs(event.oldIndex, event.oldValues.length);\n                    break;\n                default:\n                    throw new Error(`Invalid event type: ${event.type}`);\n            }\n        });\n    }\n    /**\n     * Handle a change to the observable value.\n     */\n    onGenericChange() {\n        if (this.executionCount !== null) {\n            this._setDirty(this._executedCode !== this.value.text.trim());\n        }\n        this.contentChanged.emit(void 0);\n    }\n    /**\n     * Handle a change to the output shared model and reflect it in modelDB.\n     * We update the modeldb metadata when the nbcell changes.\n     *\n     * This method overrides the CellModel protected _onSharedModelChanged\n     * so we first call super._onSharedModelChanged\n     *\n     * @override CellModel._onSharedModelChanged\n     */\n    _onSharedModelChanged(sender, change) {\n        super._onSharedModelChanged(sender, change);\n        this._modelDBMutex(() => {\n            if (change.outputsChange) {\n                this.clearExecution();\n                sender.getOutputs().forEach(output => this._outputs.add(output));\n            }\n            if (change.executionCountChange) {\n                this.executionCount = change.executionCountChange.newValue\n                    ? change.executionCountChange.newValue\n                    : null;\n            }\n        });\n    }\n    /**\n     * Handle a change to the execution count.\n     */\n    _onExecutionCountChanged(count, args) {\n        const codeCell = this.sharedModel;\n        this._modelDBMutex(() => {\n            codeCell.execution_count = args.newValue\n                ? args.newValue\n                : null;\n        });\n        this.contentChanged.emit(void 0);\n        this.stateChanged.emit({\n            name: 'executionCount',\n            oldValue: args.oldValue,\n            newValue: args.newValue\n        });\n        if (args.newValue && this.isDirty) {\n            this._setDirty(false);\n        }\n    }\n}\n/**\n * The namespace for `CodeCellModel` statics.\n */\n(function (CodeCellModel) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     */\n    class ContentFactory {\n        /**\n         * Create an output area.\n         */\n        createOutputArea(options) {\n            return new OutputAreaModel(options);\n        }\n    }\n    CodeCellModel.ContentFactory = ContentFactory;\n    /**\n     * The shared `ContentFactory` instance.\n     */\n    CodeCellModel.defaultContentFactory = new ContentFactory();\n})(CodeCellModel || (CodeCellModel = {}));\nvar Private;\n(function (Private) {\n    function collapseChanged(metadata, args) {\n        if (args.key === 'collapsed') {\n            const jupyter = (metadata.get('jupyter') || {});\n            const { outputs_hidden } = jupyter, newJupyter = __rest(jupyter, [\"outputs_hidden\"]);\n            if (outputs_hidden !== args.newValue) {\n                if (args.newValue !== undefined) {\n                    newJupyter['outputs_hidden'] = args.newValue;\n                }\n                if (Object.keys(newJupyter).length === 0) {\n                    metadata.delete('jupyter');\n                }\n                else {\n                    metadata.set('jupyter', newJupyter);\n                }\n            }\n        }\n        else if (args.key === 'jupyter') {\n            const jupyter = (args.newValue || {});\n            if (jupyter.hasOwnProperty('outputs_hidden')) {\n                metadata.set('collapsed', jupyter.outputs_hidden);\n            }\n            else {\n                metadata.delete('collapsed');\n            }\n        }\n    }\n    Private.collapseChanged = collapseChanged;\n})(Private || (Private = {}));\n//# sourceMappingURL=model.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport * as React from 'react';\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport { ellipsesIcon } from '@jupyterlab/ui-components';\n/**\n * The CSS class added to placeholders.\n */\nconst PLACEHOLDER_CLASS = 'jp-Placeholder';\n/**\n * The CSS classes added to input placeholder prompts.\n */\nconst INPUT_PROMPT_CLASS = 'jp-Placeholder-prompt jp-InputPrompt';\n/**\n * The CSS classes added to output placeholder prompts.\n */\nconst OUTPUT_PROMPT_CLASS = 'jp-Placeholder-prompt jp-OutputPrompt';\n/**\n * The CSS class added to placeholder content.\n */\nconst CONTENT_CLASS = 'jp-Placeholder-content';\n/**\n * The CSS class added to input placeholders.\n */\nconst INPUT_PLACEHOLDER_CLASS = 'jp-InputPlaceholder';\n/**\n * The CSS class added to output placeholders.\n */\nconst OUTPUT_PLACEHOLDER_CLASS = 'jp-OutputPlaceholder';\n/**\n * An abstract base class for placeholders\n *\n * ### Notes\n * A placeholder is the element that is shown when input/output\n * is hidden.\n */\nexport class Placeholder extends ReactWidget {\n    /**\n     * Construct a new placeholder.\n     */\n    constructor(callback) {\n        super();\n        this.addClass(PLACEHOLDER_CLASS);\n        this._callback = callback;\n    }\n    /**\n     * Handle the click event.\n     */\n    handleClick(e) {\n        const callback = this._callback;\n        callback(e);\n    }\n}\n/**\n * The input placeholder class.\n */\nexport class InputPlaceholder extends Placeholder {\n    /**\n     * Construct a new input placeholder.\n     */\n    constructor(callback) {\n        super(callback);\n        this.addClass(INPUT_PLACEHOLDER_CLASS);\n    }\n    /**\n     * Render the input placeholder using the virtual DOM.\n     */\n    render() {\n        return [\n            React.createElement(\"div\", { className: INPUT_PROMPT_CLASS, key: \"input\" }),\n            React.createElement(\"div\", { className: CONTENT_CLASS, onClick: e => this.handleClick(e), key: \"content\" },\n                React.createElement(ellipsesIcon.react, { className: \"jp-MoreHorizIcon\", elementPosition: \"center\", height: \"auto\", width: \"32px\" }))\n        ];\n    }\n}\n/**\n * The output placeholder class.\n */\nexport class OutputPlaceholder extends Placeholder {\n    /**\n     * Construct a new output placeholder.\n     */\n    constructor(callback) {\n        super(callback);\n        this.addClass(OUTPUT_PLACEHOLDER_CLASS);\n    }\n    /**\n     * Render the output placeholder using the virtual DOM.\n     */\n    render() {\n        return [\n            React.createElement(\"div\", { className: OUTPUT_PROMPT_CLASS, key: \"output\" }),\n            React.createElement(\"div\", { className: CONTENT_CLASS, onClick: e => this.handleClick(e), key: \"content\" },\n                React.createElement(ellipsesIcon.react, { className: \"jp-MoreHorizIcon\", elementPosition: \"center\", height: \"auto\", width: \"32px\" }))\n        ];\n    }\n}\n//# sourceMappingURL=placeholder.js.map","import { Widget } from '@lumino/widgets';\nconst RESIZE_HANDLE_CLASS = 'jp-CellResizeHandle';\nconst CELL_RESIZED_CLASS = 'jp-mod-resizedCell';\n/**\n * A handle that allows to change input/output proportions in side-by-side mode.\n */\nexport class ResizeHandle extends Widget {\n    constructor(targetNode) {\n        super();\n        this.targetNode = targetNode;\n        this._isActive = false;\n        this._isDragging = false;\n        this._protectedWidth = 10;\n        this.addClass(RESIZE_HANDLE_CLASS);\n    }\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        this.node.addEventListener('dblclick', this);\n        this.node.addEventListener('mousedown', this);\n    }\n    onAfterDetach(msg) {\n        super.onAfterAttach(msg);\n        this.node.removeEventListener('dblclick', this);\n        this.node.removeEventListener('mousedown', this);\n    }\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     */\n    handleEvent(event) {\n        var _a, _b;\n        switch (event.type) {\n            case 'dblclick':\n                (_a = this.targetNode.parentNode) === null || _a === void 0 ? void 0 : _a.childNodes.forEach(node => {\n                    node.classList.remove(CELL_RESIZED_CLASS);\n                });\n                document.documentElement.style.setProperty('--jp-side-by-side-resized-cell', '');\n                this._isActive = false;\n                break;\n            case 'mousedown':\n                this._mouseOffset =\n                    event.clientX - this.node.getBoundingClientRect().x;\n                this._isDragging = true;\n                if (!this._isActive) {\n                    (_b = this.targetNode.parentNode) === null || _b === void 0 ? void 0 : _b.childNodes.forEach(node => {\n                        node.classList.add(CELL_RESIZED_CLASS);\n                    });\n                    this._isActive = true;\n                }\n                window.addEventListener('mousemove', this);\n                window.addEventListener('mouseup', this);\n                break;\n            case 'mousemove': {\n                if (!this._isActive || !this._isDragging) {\n                    return;\n                }\n                const targetRect = this.targetNode.getBoundingClientRect();\n                const inputWidth = event.clientX - targetRect.x - this._mouseOffset;\n                const resized_ratio = 1 -\n                    Math.min(Math.max(inputWidth, this._protectedWidth), targetRect.width - this._protectedWidth) /\n                        (targetRect.width - this._protectedWidth);\n                // Added friction to the dragging interaction\n                if (Math.round(resized_ratio * 100) % 10 == 0) {\n                    document.documentElement.style.setProperty('--jp-side-by-side-resized-cell', resized_ratio + 'fr');\n                }\n                break;\n            }\n            case 'mouseup':\n                this._isDragging = false;\n                window.removeEventListener('mousemove', this);\n                window.removeEventListener('mouseup', this);\n                break;\n            default:\n                break;\n        }\n    }\n}\n//# sourceMappingURL=resizeHandle.js.map","/* -----------------------------------------------------------------------------\n| Copyright (c) Jupyter Development Team.\n| Distributed under the terms of the Modified BSD License.\n|----------------------------------------------------------------------------*/\nimport marked from 'marked';\nimport { AttachmentsResolver } from '@jupyterlab/attachments';\nimport { ActivityMonitor, URLExt } from '@jupyterlab/coreutils';\nimport { OutputArea, OutputPrompt, SimplifiedOutputArea, Stdin } from '@jupyterlab/outputarea';\nimport { imageRendererFactory, MimeModel } from '@jupyterlab/rendermime';\nimport { PromiseDelegate, UUID } from '@lumino/coreutils';\nimport { filter, some, toArray } from '@lumino/algorithm';\nimport { Panel, PanelLayout, Widget } from '@lumino/widgets';\nimport { InputCollapser, OutputCollapser } from './collapser';\nimport { CellFooter, CellHeader } from './headerfooter';\nimport { InputArea, InputPrompt } from './inputarea';\nimport { InputPlaceholder, OutputPlaceholder } from './placeholder';\nimport { ResizeHandle } from './resizeHandle';\nimport { Signal } from '@lumino/signaling';\nimport { addIcon } from '@jupyterlab/ui-components';\n/**\n * The CSS class added to cell widgets.\n */\nconst CELL_CLASS = 'jp-Cell';\n/**\n * The CSS class added to the cell header.\n */\nconst CELL_HEADER_CLASS = 'jp-Cell-header';\n/**\n * The CSS class added to the cell footer.\n */\nconst CELL_FOOTER_CLASS = 'jp-Cell-footer';\n/**\n * The CSS class added to the cell input wrapper.\n */\nconst CELL_INPUT_WRAPPER_CLASS = 'jp-Cell-inputWrapper';\n/**\n * The CSS class added to the cell output wrapper.\n */\nconst CELL_OUTPUT_WRAPPER_CLASS = 'jp-Cell-outputWrapper';\n/**\n * The CSS class added to the cell input area.\n */\nconst CELL_INPUT_AREA_CLASS = 'jp-Cell-inputArea';\n/**\n * The CSS class added to the cell output area.\n */\nconst CELL_OUTPUT_AREA_CLASS = 'jp-Cell-outputArea';\n/**\n * The CSS class added to the cell input collapser.\n */\nconst CELL_INPUT_COLLAPSER_CLASS = 'jp-Cell-inputCollapser';\n/**\n * The CSS class added to the cell output collapser.\n */\nconst CELL_OUTPUT_COLLAPSER_CLASS = 'jp-Cell-outputCollapser';\n/**\n * The class name added to the cell when readonly.\n */\nconst READONLY_CLASS = 'jp-mod-readOnly';\n/**\n * The class name added to the cell when dirty.\n */\nconst DIRTY_CLASS = 'jp-mod-dirty';\n/**\n * The class name added to code cells.\n */\nconst CODE_CELL_CLASS = 'jp-CodeCell';\n/**\n * The class name added to markdown cells.\n */\nconst MARKDOWN_CELL_CLASS = 'jp-MarkdownCell';\n/**\n * The class name added to rendered markdown output widgets.\n */\nconst MARKDOWN_OUTPUT_CLASS = 'jp-MarkdownOutput';\nexport const MARKDOWN_HEADING_COLLAPSED = 'jp-MarkdownHeadingCollapsed';\nconst HEADING_COLLAPSER_CLASS = 'jp-collapseHeadingButton';\nconst SHOW_HIDDEN_CELLS_CLASS = 'jp-showHiddenCellsButton';\n/**\n * The class name added to raw cells.\n */\nconst RAW_CELL_CLASS = 'jp-RawCell';\n/**\n * The class name added to a rendered input area.\n */\nconst RENDERED_CLASS = 'jp-mod-rendered';\nconst NO_OUTPUTS_CLASS = 'jp-mod-noOutputs';\n/**\n * The text applied to an empty markdown cell.\n */\nconst DEFAULT_MARKDOWN_TEXT = 'Type Markdown and LaTeX: $ α^2 $';\n/**\n * The timeout to wait for change activity to have ceased before rendering.\n */\nconst RENDER_TIMEOUT = 1000;\n/**\n * The mime type for a rich contents drag object.\n */\nconst CONTENTS_MIME_RICH = 'application/x-jupyter-icontentsrich';\n/** ****************************************************************************\n * Cell\n ******************************************************************************/\n/**\n * A base cell widget.\n */\nexport class Cell extends Widget {\n    /**\n     * Construct a new base cell widget.\n     */\n    constructor(options) {\n        super();\n        this._readOnly = false;\n        this._inputHidden = false;\n        this._syncCollapse = false;\n        this._syncEditable = false;\n        this.addClass(CELL_CLASS);\n        const model = (this._model = options.model);\n        const contentFactory = (this.contentFactory =\n            options.contentFactory || Cell.defaultContentFactory);\n        this.layout = new PanelLayout();\n        // Header\n        const header = contentFactory.createCellHeader();\n        header.addClass(CELL_HEADER_CLASS);\n        this.layout.addWidget(header);\n        // Input\n        const inputWrapper = (this._inputWrapper = new Panel());\n        inputWrapper.addClass(CELL_INPUT_WRAPPER_CLASS);\n        const inputCollapser = new InputCollapser();\n        inputCollapser.addClass(CELL_INPUT_COLLAPSER_CLASS);\n        const input = (this._input = new InputArea({\n            model,\n            contentFactory,\n            updateOnShow: options.updateEditorOnShow,\n            placeholder: options.placeholder\n        }));\n        input.addClass(CELL_INPUT_AREA_CLASS);\n        inputWrapper.addWidget(inputCollapser);\n        inputWrapper.addWidget(input);\n        this.layout.addWidget(inputWrapper);\n        this._inputPlaceholder = new InputPlaceholder(() => {\n            this.inputHidden = !this.inputHidden;\n        });\n        // Footer\n        const footer = this.contentFactory.createCellFooter();\n        footer.addClass(CELL_FOOTER_CLASS);\n        this.layout.addWidget(footer);\n        // Editor settings\n        if (options.editorConfig) {\n            let editorOptions = {};\n            Object.keys(options.editorConfig).forEach((key) => {\n                var _a, _b;\n                editorOptions[key] = (_b = (_a = options.editorConfig) === null || _a === void 0 ? void 0 : _a[key]) !== null && _b !== void 0 ? _b : null;\n            });\n            this.editor.setOptions(editorOptions);\n        }\n        model.metadata.changed.connect(this.onMetadataChanged, this);\n    }\n    /**\n     * Initialize view state from model.\n     *\n     * #### Notes\n     * Should be called after construction. For convenience, returns this, so it\n     * can be chained in the construction, like `new Foo().initializeState();`\n     */\n    initializeState() {\n        this.loadCollapseState();\n        this.loadEditableState();\n        return this;\n    }\n    /**\n     * Get the prompt node used by the cell.\n     */\n    get promptNode() {\n        if (!this._inputHidden) {\n            return this._input.promptNode;\n        }\n        else {\n            return this._inputPlaceholder.node\n                .firstElementChild;\n        }\n    }\n    /**\n     * Get the CodeEditorWrapper used by the cell.\n     */\n    get editorWidget() {\n        return this._input.editorWidget;\n    }\n    /**\n     * Get the CodeEditor used by the cell.\n     */\n    get editor() {\n        return this._input.editor;\n    }\n    /**\n     * Get the model used by the cell.\n     */\n    get model() {\n        return this._model;\n    }\n    /**\n     * Get the input area for the cell.\n     */\n    get inputArea() {\n        return this._input;\n    }\n    /**\n     * The read only state of the cell.\n     */\n    get readOnly() {\n        return this._readOnly;\n    }\n    set readOnly(value) {\n        if (value === this._readOnly) {\n            return;\n        }\n        this._readOnly = value;\n        if (this.syncEditable) {\n            this.saveEditableState();\n        }\n        this.update();\n    }\n    /**\n     * Save view editable state to model\n     */\n    saveEditableState() {\n        const { metadata } = this.model;\n        const current = metadata.get('editable');\n        if ((this.readOnly && current === false) ||\n            (!this.readOnly && current === undefined)) {\n            return;\n        }\n        if (this.readOnly) {\n            this.model.metadata.set('editable', false);\n        }\n        else {\n            this.model.metadata.delete('editable');\n        }\n    }\n    /**\n     * Load view editable state from model.\n     */\n    loadEditableState() {\n        this.readOnly = this.model.metadata.get('editable') === false;\n    }\n    /**\n     * A promise that resolves when the widget renders for the first time.\n     */\n    get ready() {\n        return Promise.resolve(undefined);\n    }\n    /**\n     * Set the prompt for the widget.\n     */\n    setPrompt(value) {\n        this._input.setPrompt(value);\n    }\n    /**\n     * The view state of input being hidden.\n     */\n    get inputHidden() {\n        return this._inputHidden;\n    }\n    set inputHidden(value) {\n        if (this._inputHidden === value) {\n            return;\n        }\n        const layout = this._inputWrapper.layout;\n        if (value) {\n            this._input.parent = null;\n            layout.addWidget(this._inputPlaceholder);\n        }\n        else {\n            this._inputPlaceholder.parent = null;\n            layout.addWidget(this._input);\n        }\n        this._inputHidden = value;\n        if (this.syncCollapse) {\n            this.saveCollapseState();\n        }\n        this.handleInputHidden(value);\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveCollapseState() {\n        const jupyter = Object.assign({}, this.model.metadata.get('jupyter'));\n        if ((this.inputHidden && jupyter.source_hidden === true) ||\n            (!this.inputHidden && jupyter.source_hidden === undefined)) {\n            return;\n        }\n        if (this.inputHidden) {\n            jupyter.source_hidden = true;\n        }\n        else {\n            delete jupyter.source_hidden;\n        }\n        if (Object.keys(jupyter).length === 0) {\n            this.model.metadata.delete('jupyter');\n        }\n        else {\n            this.model.metadata.set('jupyter', jupyter);\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     */\n    loadCollapseState() {\n        const jupyter = this.model.metadata.get('jupyter') || {};\n        this.inputHidden = !!jupyter.source_hidden;\n    }\n    /**\n     * Handle the input being hidden.\n     *\n     * #### Notes\n     * This is called by the `inputHidden` setter so that subclasses\n     * can perform actions upon the input being hidden without accessing\n     * private state.\n     */\n    handleInputHidden(value) {\n        return;\n    }\n    /**\n     * Whether to sync the collapse state to the cell model.\n     */\n    get syncCollapse() {\n        return this._syncCollapse;\n    }\n    set syncCollapse(value) {\n        if (this._syncCollapse === value) {\n            return;\n        }\n        this._syncCollapse = value;\n        if (value) {\n            this.loadCollapseState();\n        }\n    }\n    /**\n     * Whether to sync the editable state to the cell model.\n     */\n    get syncEditable() {\n        return this._syncEditable;\n    }\n    set syncEditable(value) {\n        if (this._syncEditable === value) {\n            return;\n        }\n        this._syncEditable = value;\n        if (value) {\n            this.loadEditableState();\n        }\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            placeholder: false\n        });\n    }\n    /**\n     * Dispose of the resources held by the widget.\n     */\n    dispose() {\n        // Do nothing if already disposed.\n        if (this.isDisposed) {\n            return;\n        }\n        this._input = null;\n        this._model = null;\n        this._inputWrapper = null;\n        this._inputPlaceholder = null;\n        super.dispose();\n    }\n    /**\n     * Handle `after-attach` messages.\n     */\n    onAfterAttach(msg) {\n        this.update();\n    }\n    /**\n     * Handle `'activate-request'` messages.\n     */\n    onActivateRequest(msg) {\n        this.editor.focus();\n    }\n    /**\n     * Handle `fit-request` messages.\n     */\n    onFitRequest(msg) {\n        // need this for for when a theme changes font size\n        this.editor.refresh();\n    }\n    /**\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        if (!this._model) {\n            return;\n        }\n        // Handle read only state.\n        if (this.editor.getOption('readOnly') !== this._readOnly) {\n            this.editor.setOption('readOnly', this._readOnly);\n            this.toggleClass(READONLY_CLASS, this._readOnly);\n        }\n    }\n    /**\n     * Handle changes in the metadata.\n     */\n    onMetadataChanged(model, args) {\n        switch (args.key) {\n            case 'jupyter':\n                if (this.syncCollapse) {\n                    this.loadCollapseState();\n                }\n                break;\n            case 'editable':\n                if (this.syncEditable) {\n                    this.loadEditableState();\n                }\n                break;\n            default:\n                break;\n        }\n    }\n}\n/**\n * The namespace for the `Cell` class statics.\n */\n(function (Cell) {\n    /**\n     * The default implementation of an `IContentFactory`.\n     *\n     * This includes a CodeMirror editor factory to make it easy to use out of the box.\n     */\n    class ContentFactory {\n        /**\n         * Create a content factory for a cell.\n         */\n        constructor(options = {}) {\n            this._editorFactory =\n                options.editorFactory || InputArea.defaultEditorFactory;\n        }\n        /**\n         * The readonly editor factory that create code editors\n         */\n        get editorFactory() {\n            return this._editorFactory;\n        }\n        /**\n         * Create a new cell header for the parent widget.\n         */\n        createCellHeader() {\n            return new CellHeader();\n        }\n        /**\n         * Create a new cell header for the parent widget.\n         */\n        createCellFooter() {\n            return new CellFooter();\n        }\n        /**\n         * Create an input prompt.\n         */\n        createInputPrompt() {\n            return new InputPrompt();\n        }\n        /**\n         * Create the output prompt for the widget.\n         */\n        createOutputPrompt() {\n            return new OutputPrompt();\n        }\n        /**\n         * Create an stdin widget.\n         */\n        createStdin(options) {\n            return new Stdin(options);\n        }\n    }\n    Cell.ContentFactory = ContentFactory;\n    /**\n     * The default content factory for cells.\n     */\n    Cell.defaultContentFactory = new ContentFactory();\n})(Cell || (Cell = {}));\n/** ****************************************************************************\n * CodeCell\n ******************************************************************************/\n/**\n * A widget for a code cell.\n */\nexport class CodeCell extends Cell {\n    /**\n     * Construct a code cell widget.\n     */\n    constructor(options) {\n        super(options);\n        this._outputHidden = false;\n        this._syncScrolled = false;\n        this._savingMetadata = false;\n        this.addClass(CODE_CELL_CLASS);\n        // Only save options not handled by parent constructor.\n        const rendermime = (this._rendermime = options.rendermime);\n        const contentFactory = this.contentFactory;\n        const model = this.model;\n        if (!options.placeholder) {\n            // Insert the output before the cell footer.\n            const outputWrapper = (this._outputWrapper = new Panel());\n            outputWrapper.addClass(CELL_OUTPUT_WRAPPER_CLASS);\n            const outputCollapser = new OutputCollapser();\n            outputCollapser.addClass(CELL_OUTPUT_COLLAPSER_CLASS);\n            const output = (this._output = new OutputArea({\n                model: model.outputs,\n                rendermime,\n                contentFactory: contentFactory,\n                maxNumberOutputs: options.maxNumberOutputs\n            }));\n            output.addClass(CELL_OUTPUT_AREA_CLASS);\n            // Set a CSS if there are no outputs, and connect a signal for future\n            // changes to the number of outputs. This is for conditional styling\n            // if there are no outputs.\n            if (model.outputs.length === 0) {\n                this.addClass(NO_OUTPUTS_CLASS);\n            }\n            output.outputLengthChanged.connect(this._outputLengthHandler, this);\n            outputWrapper.addWidget(outputCollapser);\n            outputWrapper.addWidget(output);\n            this.layout.insertWidget(2, new ResizeHandle(this.node));\n            this.layout.insertWidget(3, outputWrapper);\n            if (model.isDirty) {\n                this.addClass(DIRTY_CLASS);\n            }\n            this._outputPlaceholder = new OutputPlaceholder(() => {\n                this.outputHidden = !this.outputHidden;\n            });\n        }\n        model.stateChanged.connect(this.onStateChanged, this);\n    }\n    /**\n     * Initialize view state from model.\n     *\n     * #### Notes\n     * Should be called after construction. For convenience, returns this, so it\n     * can be chained in the construction, like `new Foo().initializeState();`\n     */\n    initializeState() {\n        super.initializeState();\n        this.loadScrolledState();\n        this.setPrompt(`${this.model.executionCount || ''}`);\n        return this;\n    }\n    /**\n     * Get the output area for the cell.\n     */\n    get outputArea() {\n        return this._output;\n    }\n    /**\n     * The view state of output being collapsed.\n     */\n    get outputHidden() {\n        return this._outputHidden;\n    }\n    set outputHidden(value) {\n        if (this._outputHidden === value) {\n            return;\n        }\n        const layout = this._outputWrapper.layout;\n        if (value) {\n            layout.removeWidget(this._output);\n            layout.addWidget(this._outputPlaceholder);\n            if (this.inputHidden && !this._outputWrapper.isHidden) {\n                this._outputWrapper.hide();\n            }\n        }\n        else {\n            if (this._outputWrapper.isHidden) {\n                this._outputWrapper.show();\n            }\n            layout.removeWidget(this._outputPlaceholder);\n            layout.addWidget(this._output);\n        }\n        this._outputHidden = value;\n        if (this.syncCollapse) {\n            this.saveCollapseState();\n        }\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveCollapseState() {\n        // Because collapse state for a code cell involves two different pieces of\n        // metadata (the `collapsed` and `jupyter` metadata keys), we block reacting\n        // to changes in metadata until we have fully committed our changes.\n        // Otherwise setting one key can trigger a write to the other key to\n        // maintain the synced consistency.\n        this._savingMetadata = true;\n        try {\n            super.saveCollapseState();\n            const metadata = this.model.metadata;\n            const collapsed = this.model.metadata.get('collapsed');\n            if ((this.outputHidden && collapsed === true) ||\n                (!this.outputHidden && collapsed === undefined)) {\n                return;\n            }\n            // Do not set jupyter.outputs_hidden since it is redundant. See\n            // and https://github.com/jupyter/nbformat/issues/137\n            if (this.outputHidden) {\n                metadata.set('collapsed', true);\n            }\n            else {\n                metadata.delete('collapsed');\n            }\n        }\n        finally {\n            this._savingMetadata = false;\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     *\n     * We consider the `collapsed` metadata key as the source of truth for outputs\n     * being hidden.\n     */\n    loadCollapseState() {\n        super.loadCollapseState();\n        this.outputHidden = !!this.model.metadata.get('collapsed');\n    }\n    /**\n     * Whether the output is in a scrolled state?\n     */\n    get outputsScrolled() {\n        return this._outputsScrolled;\n    }\n    set outputsScrolled(value) {\n        this.toggleClass('jp-mod-outputsScrolled', value);\n        this._outputsScrolled = value;\n        if (this.syncScrolled) {\n            this.saveScrolledState();\n        }\n    }\n    /**\n     * Save view collapse state to model\n     */\n    saveScrolledState() {\n        const { metadata } = this.model;\n        const current = metadata.get('scrolled');\n        if ((this.outputsScrolled && current === true) ||\n            (!this.outputsScrolled && current === undefined)) {\n            return;\n        }\n        if (this.outputsScrolled) {\n            metadata.set('scrolled', true);\n        }\n        else {\n            metadata.delete('scrolled');\n        }\n    }\n    /**\n     * Revert view collapse state from model.\n     */\n    loadScrolledState() {\n        const metadata = this.model.metadata;\n        // We don't have the notion of 'auto' scrolled, so we make it false.\n        if (metadata.get('scrolled') === 'auto') {\n            this.outputsScrolled = false;\n        }\n        else {\n            this.outputsScrolled = !!metadata.get('scrolled');\n        }\n    }\n    /**\n     * Whether to sync the scrolled state to the cell model.\n     */\n    get syncScrolled() {\n        return this._syncScrolled;\n    }\n    set syncScrolled(value) {\n        if (this._syncScrolled === value) {\n            return;\n        }\n        this._syncScrolled = value;\n        if (value) {\n            this.loadScrolledState();\n        }\n    }\n    /**\n     * Handle the input being hidden.\n     *\n     * #### Notes\n     * This method is called by the case cell implementation and is\n     * subclasses here so the code cell can watch to see when input\n     * is hidden without accessing private state.\n     */\n    handleInputHidden(value) {\n        if (!value && this._outputWrapper.isHidden) {\n            this._outputWrapper.show();\n        }\n        else if (value && !this._outputWrapper.isHidden && this._outputHidden) {\n            this._outputWrapper.hide();\n        }\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime,\n            placeholder: false\n        });\n    }\n    /**\n     * Clone the OutputArea alone, returning a simplified output area, using the same model.\n     */\n    cloneOutputArea() {\n        return new SimplifiedOutputArea({\n            model: this.model.outputs,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime\n        });\n    }\n    /**\n     * Dispose of the resources used by the widget.\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        this._output.outputLengthChanged.disconnect(this._outputLengthHandler, this);\n        this._rendermime = null;\n        this._output = null;\n        this._outputWrapper = null;\n        this._outputPlaceholder = null;\n        super.dispose();\n    }\n    /**\n     * Handle changes in the model.\n     */\n    onStateChanged(model, args) {\n        switch (args.name) {\n            case 'executionCount':\n                this.setPrompt(`${model.executionCount || ''}`);\n                break;\n            case 'isDirty':\n                if (model.isDirty) {\n                    this.addClass(DIRTY_CLASS);\n                }\n                else {\n                    this.removeClass(DIRTY_CLASS);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle changes in the metadata.\n     */\n    onMetadataChanged(model, args) {\n        if (this._savingMetadata) {\n            // We are in middle of a metadata transaction, so don't react to it.\n            return;\n        }\n        switch (args.key) {\n            case 'scrolled':\n                if (this.syncScrolled) {\n                    this.loadScrolledState();\n                }\n                break;\n            case 'collapsed':\n                if (this.syncCollapse) {\n                    this.loadCollapseState();\n                }\n                break;\n            default:\n                break;\n        }\n        super.onMetadataChanged(model, args);\n    }\n    /**\n     * Handle changes in the number of outputs in the output area.\n     */\n    _outputLengthHandler(sender, args) {\n        const force = args === 0 ? true : false;\n        this.toggleClass(NO_OUTPUTS_CLASS, force);\n    }\n}\n/**\n * The namespace for the `CodeCell` class statics.\n */\n(function (CodeCell) {\n    /**\n     * Execute a cell given a client session.\n     */\n    async function execute(cell, sessionContext, metadata) {\n        var _a;\n        const model = cell.model;\n        const code = model.value.text;\n        if (!code.trim() || !((_a = sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel)) {\n            model.clearExecution();\n            return;\n        }\n        const cellId = { cellId: model.id };\n        metadata = Object.assign(Object.assign(Object.assign({}, model.metadata.toJSON()), metadata), cellId);\n        const { recordTiming } = metadata;\n        model.clearExecution();\n        cell.outputHidden = false;\n        cell.setPrompt('*');\n        model.trusted = true;\n        let future;\n        try {\n            const msgPromise = OutputArea.execute(code, cell.outputArea, sessionContext, metadata);\n            // cell.outputArea.future assigned synchronously in `execute`\n            if (recordTiming) {\n                const recordTimingHook = (msg) => {\n                    let label;\n                    switch (msg.header.msg_type) {\n                        case 'status':\n                            label = `status.${msg.content.execution_state}`;\n                            break;\n                        case 'execute_input':\n                            label = 'execute_input';\n                            break;\n                        default:\n                            return true;\n                    }\n                    // If the data is missing, estimate it to now\n                    // Date was added in 5.1: https://jupyter-client.readthedocs.io/en/stable/messaging.html#message-header\n                    const value = msg.header.date || new Date().toISOString();\n                    const timingInfo = Object.assign({}, model.metadata.get('execution'));\n                    timingInfo[`iopub.${label}`] = value;\n                    model.metadata.set('execution', timingInfo);\n                    return true;\n                };\n                cell.outputArea.future.registerMessageHook(recordTimingHook);\n            }\n            else {\n                model.metadata.delete('execution');\n            }\n            // Save this execution's future so we can compare in the catch below.\n            future = cell.outputArea.future;\n            const msg = (await msgPromise);\n            model.executionCount = msg.content.execution_count;\n            if (recordTiming) {\n                const timingInfo = Object.assign({}, model.metadata.get('execution'));\n                const started = msg.metadata.started;\n                // Started is not in the API, but metadata IPyKernel sends\n                if (started) {\n                    timingInfo['shell.execute_reply.started'] = started;\n                }\n                // Per above, the 5.0 spec does not assume date, so we estimate is required\n                const finished = msg.header.date;\n                timingInfo['shell.execute_reply'] =\n                    finished || new Date().toISOString();\n                model.metadata.set('execution', timingInfo);\n            }\n            return msg;\n        }\n        catch (e) {\n            // If we started executing, and the cell is still indicating this\n            // execution, clear the prompt.\n            if (future && !cell.isDisposed && cell.outputArea.future === future) {\n                cell.setPrompt('');\n            }\n            throw e;\n        }\n    }\n    CodeCell.execute = execute;\n})(CodeCell || (CodeCell = {}));\n/**\n * `AttachmentsCell` - A base class for a cell widget that allows\n *  attachments to be drag/drop'd or pasted onto it\n */\nexport class AttachmentsCell extends Cell {\n    /**\n     * Handle the DOM events for the widget.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the notebook panel's node. It should\n     * not be called directly by user code.\n     */\n    handleEvent(event) {\n        switch (event.type) {\n            case 'paste':\n                this._evtPaste(event);\n                break;\n            case 'dragenter':\n                event.preventDefault();\n                break;\n            case 'dragover':\n                event.preventDefault();\n                break;\n            case 'drop':\n                this._evtNativeDrop(event);\n                break;\n            case 'lm-dragover':\n                this._evtDragOver(event);\n                break;\n            case 'lm-drop':\n                this._evtDrop(event);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     * Handle `after-attach` messages for the widget.\n     */\n    onAfterAttach(msg) {\n        super.onAfterAttach(msg);\n        const node = this.node;\n        node.addEventListener('lm-dragover', this);\n        node.addEventListener('lm-drop', this);\n        node.addEventListener('dragenter', this);\n        node.addEventListener('dragover', this);\n        node.addEventListener('drop', this);\n        node.addEventListener('paste', this);\n    }\n    /**\n     * A message handler invoked on a `'before-detach'`\n     * message\n     */\n    onBeforeDetach(msg) {\n        const node = this.node;\n        node.removeEventListener('drop', this);\n        node.removeEventListener('dragover', this);\n        node.removeEventListener('dragenter', this);\n        node.removeEventListener('paste', this);\n        node.removeEventListener('lm-dragover', this);\n        node.removeEventListener('lm-drop', this);\n    }\n    _evtDragOver(event) {\n        const supportedMimeType = some(imageRendererFactory.mimeTypes, mimeType => {\n            if (!event.mimeData.hasData(CONTENTS_MIME_RICH)) {\n                return false;\n            }\n            const data = event.mimeData.getData(CONTENTS_MIME_RICH);\n            return data.model.mimetype === mimeType;\n        });\n        if (!supportedMimeType) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        event.dropAction = event.proposedAction;\n    }\n    /**\n     * Handle the `paste` event for the widget\n     */\n    _evtPaste(event) {\n        if (event.clipboardData) {\n            const items = event.clipboardData.items;\n            for (let i = 0; i < items.length; i++) {\n                if (items[i].type === 'text/plain') {\n                    // Skip if this text is the path to a file\n                    if (i < items.length - 1 && items[i + 1].kind === 'file') {\n                        continue;\n                    }\n                    items[i].getAsString(text => {\n                        var _a, _b;\n                        (_b = (_a = this.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, text);\n                    });\n                }\n                this._attachFiles(event.clipboardData.items);\n            }\n        }\n        event.preventDefault();\n    }\n    /**\n     * Handle the `drop` event for the widget\n     */\n    _evtNativeDrop(event) {\n        if (event.dataTransfer) {\n            this._attachFiles(event.dataTransfer.items);\n        }\n        event.preventDefault();\n    }\n    /**\n     * Handle the `'lm-drop'` event for the widget.\n     */\n    _evtDrop(event) {\n        const supportedMimeTypes = toArray(filter(event.mimeData.types(), mimeType => {\n            if (mimeType === CONTENTS_MIME_RICH) {\n                const data = event.mimeData.getData(CONTENTS_MIME_RICH);\n                return (imageRendererFactory.mimeTypes.indexOf(data.model.mimetype) !== -1);\n            }\n            return imageRendererFactory.mimeTypes.indexOf(mimeType) !== -1;\n        }));\n        if (supportedMimeTypes.length === 0) {\n            return;\n        }\n        event.preventDefault();\n        event.stopPropagation();\n        if (event.proposedAction === 'none') {\n            event.dropAction = 'none';\n            return;\n        }\n        event.dropAction = 'copy';\n        for (const mimeType of supportedMimeTypes) {\n            if (mimeType === CONTENTS_MIME_RICH) {\n                const { model, withContent } = event.mimeData.getData(CONTENTS_MIME_RICH);\n                if (model.type === 'file') {\n                    const URI = this._generateURI(model.name);\n                    this.updateCellSourceWithAttachment(model.name, URI);\n                    void withContent().then(fullModel => {\n                        this.model.attachments.set(URI, {\n                            [fullModel.mimetype]: fullModel.content\n                        });\n                    });\n                }\n            }\n            else {\n                // Pure mimetype, no useful name to infer\n                const URI = this._generateURI();\n                this.model.attachments.set(URI, {\n                    [mimeType]: event.mimeData.getData(mimeType)\n                });\n                this.updateCellSourceWithAttachment(URI, URI);\n            }\n        }\n    }\n    /**\n     * Attaches all DataTransferItems (obtained from\n     * clipboard or native drop events) to the cell\n     */\n    _attachFiles(items) {\n        for (let i = 0; i < items.length; i++) {\n            const item = items[i];\n            if (item.kind === 'file') {\n                const blob = item.getAsFile();\n                if (blob) {\n                    this._attachFile(blob);\n                }\n            }\n        }\n    }\n    /**\n     * Takes in a file object and adds it to\n     * the cell attachments\n     */\n    _attachFile(blob) {\n        const reader = new FileReader();\n        reader.onload = evt => {\n            const { href, protocol } = URLExt.parse(reader.result);\n            if (protocol !== 'data:') {\n                return;\n            }\n            const dataURIRegex = /([\\w+\\/\\+]+)?(?:;(charset=[\\w\\d-]*|base64))?,(.*)/;\n            const matches = dataURIRegex.exec(href);\n            if (!matches || matches.length !== 4) {\n                return;\n            }\n            const mimeType = matches[1];\n            const encodedData = matches[3];\n            const bundle = { [mimeType]: encodedData };\n            const URI = this._generateURI(blob.name);\n            if (mimeType.startsWith('image/')) {\n                this.model.attachments.set(URI, bundle);\n                this.updateCellSourceWithAttachment(blob.name, URI);\n            }\n        };\n        reader.onerror = evt => {\n            console.error(`Failed to attach ${blob.name}` + evt);\n        };\n        reader.readAsDataURL(blob);\n    }\n    /**\n     * Generates a unique URI for a file\n     * while preserving the file extension.\n     */\n    _generateURI(name = '') {\n        const lastIndex = name.lastIndexOf('.');\n        return lastIndex !== -1\n            ? UUID.uuid4().concat(name.substring(lastIndex))\n            : UUID.uuid4();\n    }\n}\n/** ****************************************************************************\n * MarkdownCell\n ******************************************************************************/\n/**\n * A widget for a Markdown cell.\n *\n * #### Notes\n * Things get complicated if we want the rendered text to update\n * any time the text changes, the text editor model changes,\n * or the input area model changes.  We don't support automatically\n * updating the rendered text in all of these cases.\n */\nexport class MarkdownCell extends AttachmentsCell {\n    /**\n     * Construct a Markdown cell widget.\n     */\n    constructor(options) {\n        var _a, _b;\n        super(options);\n        this._toggleCollapsedSignal = new Signal(this);\n        this._renderer = null;\n        this._rendered = true;\n        this._prevText = '';\n        this._ready = new PromiseDelegate();\n        this.addClass(MARKDOWN_CELL_CLASS);\n        // Ensure we can resolve attachments:\n        this._rendermime = options.rendermime.clone({\n            resolver: new AttachmentsResolver({\n                parent: (_a = options.rendermime.resolver) !== null && _a !== void 0 ? _a : undefined,\n                model: this.model.attachments\n            })\n        });\n        // Stop codemirror handling paste\n        this.editor.setOption('handlePaste', false);\n        // Check if heading cell is set to be collapsed\n        this._headingCollapsed = ((_b = this.model.metadata.get(MARKDOWN_HEADING_COLLAPSED)) !== null && _b !== void 0 ? _b : false);\n        // Throttle the rendering rate of the widget.\n        this._monitor = new ActivityMonitor({\n            signal: this.model.contentChanged,\n            timeout: RENDER_TIMEOUT\n        });\n        this._monitor.activityStopped.connect(() => {\n            if (this._rendered) {\n                this.update();\n            }\n        }, this);\n        void this._updateRenderedInput().then(() => {\n            this._ready.resolve(void 0);\n        });\n        this.renderCollapseButtons(this._renderer);\n        this.renderInput(this._renderer);\n    }\n    /**\n     * A promise that resolves when the widget renders for the first time.\n     */\n    get ready() {\n        return this._ready.promise;\n    }\n    /**\n     * Text that represents the heading if cell is a heading.\n     * Returns empty string if not a heading.\n     */\n    get headingInfo() {\n        let text = this.model.value.text;\n        const lines = marked.lexer(text);\n        let line;\n        for (line of lines) {\n            if (line.type === 'heading') {\n                return { text: line.text, level: line.depth };\n            }\n            else if (line.type === 'html') {\n                let match = line.raw.match(/<h([1-6])(.*?)>(.*?)<\\/h\\1>/);\n                if (match === null || match === void 0 ? void 0 : match[3]) {\n                    return { text: match[3], level: parseInt(match[1]) };\n                }\n                return { text: '', level: -1 };\n            }\n        }\n        return { text: '', level: -1 };\n    }\n    get headingCollapsed() {\n        return this._headingCollapsed;\n    }\n    set headingCollapsed(value) {\n        this._headingCollapsed = value;\n        if (value) {\n            this.model.metadata.set(MARKDOWN_HEADING_COLLAPSED, value);\n        }\n        else if (this.model.metadata.has(MARKDOWN_HEADING_COLLAPSED)) {\n            this.model.metadata.delete(MARKDOWN_HEADING_COLLAPSED);\n        }\n        const collapseButton = this.inputArea.promptNode.getElementsByClassName(HEADING_COLLAPSER_CLASS)[0];\n        if (collapseButton) {\n            collapseButton.setAttribute('style', `background:\n      ${value ? 'var(--jp-icon-caret-right)' : 'var(--jp-icon-caret-down)'} no-repeat center`);\n        }\n        this.renderCollapseButtons(this._renderer);\n    }\n    get numberChildNodes() {\n        return this._numberChildNodes;\n    }\n    set numberChildNodes(value) {\n        this._numberChildNodes = value;\n        this.renderCollapseButtons(this._renderer);\n    }\n    get toggleCollapsedSignal() {\n        return this._toggleCollapsedSignal;\n    }\n    /**\n     * Whether the cell is rendered.\n     */\n    get rendered() {\n        return this._rendered;\n    }\n    set rendered(value) {\n        if (value === this._rendered) {\n            return;\n        }\n        this._rendered = value;\n        this._handleRendered();\n        // Refreshing an editor can be really expensive, so we don't call it from\n        // _handleRendered, since _handledRendered is also called on every update\n        // request.\n        if (!this._rendered) {\n            this.editor.refresh();\n        }\n    }\n    maybeCreateCollapseButton() {\n        if (this.headingInfo.level > 0 &&\n            this.inputArea.promptNode.getElementsByClassName(HEADING_COLLAPSER_CLASS)\n                .length == 0) {\n            let collapseButton = this.inputArea.promptNode.appendChild(document.createElement('button'));\n            collapseButton.className = `bp3-button bp3-minimal jp-Button minimal ${HEADING_COLLAPSER_CLASS}`;\n            collapseButton.style.background = `${this._headingCollapsed\n                ? 'var(--jp-icon-caret-right)'\n                : 'var(--jp-icon-caret-down)'} no-repeat center`;\n            collapseButton.onclick = (event) => {\n                this.headingCollapsed = !this.headingCollapsed;\n                this._toggleCollapsedSignal.emit(this._headingCollapsed);\n            };\n        }\n    }\n    maybeCreateOrUpdateExpandButton() {\n        var _a, _b;\n        const expandButton = this.node.getElementsByClassName(SHOW_HIDDEN_CELLS_CLASS);\n        // Create the \"show hidden\" button if not already created\n        if (this.headingCollapsed &&\n            expandButton.length === 0 &&\n            this._numberChildNodes > 0) {\n            const numberChildNodes = document.createElement('button');\n            numberChildNodes.className = `bp3-button bp3-minimal jp-Button ${SHOW_HIDDEN_CELLS_CLASS}`;\n            addIcon.render(numberChildNodes);\n            const numberChildNodesText = document.createElement('div');\n            numberChildNodesText.nodeValue = `${this._numberChildNodes} cell${this._numberChildNodes > 1 ? 's' : ''} hidden`;\n            numberChildNodes.appendChild(numberChildNodesText);\n            numberChildNodes.onclick = () => {\n                this.headingCollapsed = false;\n                this._toggleCollapsedSignal.emit(this._headingCollapsed);\n            };\n            this.node.appendChild(numberChildNodes);\n        }\n        else if (((_b = (_a = expandButton === null || expandButton === void 0 ? void 0 : expandButton[0]) === null || _a === void 0 ? void 0 : _a.childNodes) === null || _b === void 0 ? void 0 : _b.length) > 1) {\n            // If the heading is collapsed, update text\n            if (this._headingCollapsed) {\n                expandButton[0].childNodes[1].textContent = `${this._numberChildNodes} cell${this._numberChildNodes > 1 ? 's' : ''} hidden`;\n                // If the heading isn't collapsed, remove the button\n            }\n            else {\n                for (const el of expandButton) {\n                    this.node.removeChild(el);\n                }\n            }\n        }\n    }\n    /**\n     * Render the collapse button for heading cells,\n     * and for collapsed heading cells render the \"expand hidden cells\"\n     * button.\n     */\n    renderCollapseButtons(widget) {\n        this.node.classList.toggle(MARKDOWN_HEADING_COLLAPSED, this._headingCollapsed);\n        this.maybeCreateCollapseButton();\n        this.maybeCreateOrUpdateExpandButton();\n    }\n    /**\n     * Render an input instead of the text editor.\n     */\n    renderInput(widget) {\n        this.addClass(RENDERED_CLASS);\n        this.renderCollapseButtons(widget);\n        this.inputArea.renderInput(widget);\n    }\n    /**\n     * Show the text editor instead of rendered input.\n     */\n    showEditor() {\n        this.removeClass(RENDERED_CLASS);\n        this.inputArea.showEditor();\n    }\n    /*\n     * Handle `update-request` messages.\n     */\n    onUpdateRequest(msg) {\n        // Make sure we are properly rendered.\n        this._handleRendered();\n        super.onUpdateRequest(msg);\n    }\n    /**\n     * Modify the cell source to include a reference to the attachment.\n     */\n    updateCellSourceWithAttachment(attachmentName, URI) {\n        var _a, _b;\n        const textToBeAppended = `![${attachmentName}](attachment:${URI !== null && URI !== void 0 ? URI : attachmentName})`;\n        (_b = (_a = this.editor).replaceSelection) === null || _b === void 0 ? void 0 : _b.call(_a, textToBeAppended);\n    }\n    /**\n     * Handle the rendered state.\n     */\n    _handleRendered() {\n        if (!this._rendered) {\n            this.showEditor();\n        }\n        else {\n            // TODO: It would be nice for the cell to provide a way for\n            // its consumers to hook into when the rendering is done.\n            void this._updateRenderedInput();\n            this.renderInput(this._renderer);\n        }\n    }\n    /**\n     * Update the rendered input.\n     */\n    _updateRenderedInput() {\n        const model = this.model;\n        const text = (model && model.value.text) || DEFAULT_MARKDOWN_TEXT;\n        // Do not re-render if the text has not changed.\n        if (text !== this._prevText) {\n            const mimeModel = new MimeModel({ data: { 'text/markdown': text } });\n            if (!this._renderer) {\n                this._renderer = this._rendermime.createRenderer('text/markdown');\n                this._renderer.addClass(MARKDOWN_OUTPUT_CLASS);\n            }\n            this._prevText = text;\n            return this._renderer.renderModel(mimeModel);\n        }\n        return Promise.resolve(void 0);\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            rendermime: this._rendermime,\n            placeholder: false\n        });\n    }\n}\n/** ****************************************************************************\n * RawCell\n ******************************************************************************/\n/**\n * A widget for a raw cell.\n */\nexport class RawCell extends Cell {\n    /**\n     * Construct a raw cell widget.\n     */\n    constructor(options) {\n        super(options);\n        this.addClass(RAW_CELL_CLASS);\n    }\n    /**\n     * Clone the cell, using the same model.\n     */\n    clone() {\n        const constructor = this.constructor;\n        return new constructor({\n            model: this.model,\n            contentFactory: this.contentFactory,\n            placeholder: false\n        });\n    }\n}\n//# sourceMappingURL=widget.js.map"],"names":["DRAG_IMAGE_CLASS","CELL_DRAG_CONTENT_CLASS","CELL_DRAG_PROMPT_CLASS","CELL_DRAG_MULTIPLE_BACK","CellDragUtils","findCell","node","cells","isCellNode","cellIndex","parentElement","each","cell","index","detectTargetArea","target","targetArea","editorWidget","contains","promptNode","shouldStartDrag","prevX","prevY","nextX","nextY","dx","Math","abs","dy","createCellDragImage","activeCell","selectedCells","count","length","promptNumber","model","type","executionCount","toString","cellContent","value","text","split","slice","VirtualDOM","h","className","Collapser","ReactWidget","constructor","super","this","addClass","render","onClick","e","handleClick","InputCollapser","_a","parent","inputHidden","update","OutputCollapser","outputHidden","_b","area","ElementExt","CellHeader","Widget","CellFooter","InputArea","options","contentFactory","defaultContentFactory","prompt","_prompt","createInputPrompt","editorOptions","factory","editorFactory","updateOnShow","editor","_editor","CodeEditorWrapper","layout","PanelLayout","addWidget","placeholder","renderInput","widget","_rendered","hide","showEditor","show","setPrompt","dispose","isDisposed","ContentFactory","defaultEditorFactory","InputPrompt","CodeMirrorEditorFactory","newInlineEditor","_executionCount","textContent","AttachmentsModel","_map","ObservableMap","_isDisposed","_stateChanged","Signal","_changed","_modelDB","_serialized","_changeGuard","values","key","Object","keys","undefined","set","changed","connect","_onMapChanged","modelDB","createValue","get","fromJSON","toJSON","_onSerializedChanged","has","item","_createItem","remove","delete","clear","forEach","ret","createAttachmentModel","_onGenericChange","sender","args","emit","newValue","AttachmentModel","AttachmentsResolver","_parent","_model","url","startsWith","resolveUrl","path","getDownloadUrl","attachment","data","mimeType","imageRendererFactory","Error","isLocal","_c","call","Private","isCodeCellModel","isMarkdownCellModel","isRawCellModel","CellModel","CodeEditor","id","UUID","contentChanged","stateChanged","_modelDBMutex","onGenericChange","observableMetadata","createMap","onModelDBMetadataChange","trusted","onTrustedChanged","metadata","Array","isArray","source","map","s","replace","join","JSONExt","sharedModel","getId","getValue","setValue","create","JSON","parse","stringify","cell_type","event","getMetadata","_changeCellMetadata","setMetadata","jupyter","collapsed","name","scrolled","tags","_onSharedModelChanged","change","metadataChange","AttachmentsCellModel","attachments","_attachments","createAttachmentsModel","RawCellModel","MarkdownCellModel","CodeCellModel","_executedCode","_isDirty","outputs","execution_count","trim","_onExecutionCountChanged","setOutputs","_outputs","createOutputArea","onModelDBOutputsChange","collapseChanged","oldValue","hasOwnProperty","switchSharedModel","reinitialize","clearExecution","getOutputs","output","add","_setDirty","v","codeCell","newValues","updateOutputs","newIndex","oldIndex","oldValues","outputsChange","executionCountChange","isDirty","OutputAreaModel","outputs_hidden","newJupyter","t","p","prototype","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","__rest","CONTENT_CLASS","Placeholder","callback","_callback","InputPlaceholder","ellipsesIcon","elementPosition","height","width","OutputPlaceholder","CELL_RESIZED_CLASS","ResizeHandle","targetNode","_isActive","_isDragging","_protectedWidth","onAfterAttach","msg","addEventListener","onAfterDetach","removeEventListener","handleEvent","parentNode","childNodes","classList","document","documentElement","style","setProperty","_mouseOffset","clientX","getBoundingClientRect","x","window","targetRect","inputWidth","resized_ratio","min","max","round","DIRTY_CLASS","MARKDOWN_HEADING_COLLAPSED","HEADING_COLLAPSER_CLASS","RENDERED_CLASS","NO_OUTPUTS_CLASS","CONTENTS_MIME_RICH","Cell","_readOnly","_inputHidden","_syncCollapse","_syncEditable","header","createCellHeader","inputWrapper","_inputWrapper","Panel","inputCollapser","input","_input","updateEditorOnShow","_inputPlaceholder","footer","createCellFooter","editorConfig","setOptions","onMetadataChanged","initializeState","loadCollapseState","loadEditableState","firstElementChild","syncEditable","saveEditableState","current","readOnly","Promise","resolve","syncCollapse","saveCollapseState","handleInputHidden","assign","source_hidden","clone","onActivateRequest","focus","onFitRequest","refresh","onUpdateRequest","getOption","setOption","toggleClass","_editorFactory","createOutputPrompt","OutputPrompt","createStdin","Stdin","CodeCell","_outputHidden","_syncScrolled","_savingMetadata","rendermime","_rendermime","outputWrapper","_outputWrapper","outputCollapser","_output","OutputArea","maxNumberOutputs","outputLengthChanged","_outputLengthHandler","insertWidget","_outputPlaceholder","onStateChanged","loadScrolledState","removeWidget","isHidden","_outputsScrolled","syncScrolled","saveScrolledState","outputsScrolled","cloneOutputArea","SimplifiedOutputArea","disconnect","removeClass","force","execute","async","sessionContext","code","session","kernel","cellId","recordTiming","future","msgPromise","outputArea","recordTimingHook","label","msg_type","content","execution_state","date","Date","toISOString","timingInfo","registerMessageHook","started","finished","AttachmentsCell","_evtPaste","preventDefault","_evtNativeDrop","_evtDragOver","_evtDrop","onBeforeDetach","some","mimeData","hasData","getData","mimetype","stopPropagation","dropAction","proposedAction","clipboardData","items","kind","getAsString","replaceSelection","_attachFiles","dataTransfer","supportedMimeTypes","toArray","filter","types","withContent","URI","_generateURI","updateCellSourceWithAttachment","then","fullModel","blob","getAsFile","_attachFile","reader","FileReader","onload","evt","href","protocol","URLExt","result","matches","exec","bundle","onerror","console","error","readAsDataURL","lastIndex","lastIndexOf","concat","substring","MarkdownCell","_toggleCollapsedSignal","_renderer","_prevText","_ready","PromiseDelegate","resolver","_headingCollapsed","_monitor","ActivityMonitor","signal","timeout","activityStopped","_updateRenderedInput","renderCollapseButtons","promise","lines","line","level","depth","match","raw","parseInt","collapseButton","inputArea","getElementsByClassName","setAttribute","_numberChildNodes","_handleRendered","maybeCreateCollapseButton","headingInfo","appendChild","createElement","background","onclick","headingCollapsed","maybeCreateOrUpdateExpandButton","expandButton","numberChildNodes","addIcon","numberChildNodesText","nodeValue","el","removeChild","toggle","attachmentName","textToBeAppended","mimeModel","MimeModel","createRenderer","renderModel","RawCell"],"sourceRoot":""}