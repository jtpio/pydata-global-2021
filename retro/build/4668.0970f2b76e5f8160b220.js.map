{"version":3,"file":"4668.0970f2b76e5f8160b220.js","mappings":"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","sources":["webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/notebook-extension/lib/nboutput.js","webpack://_JUPYTERLAB.CORE_OUTPUT/../../node_modules/@jupyterlab/notebook-extension/lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILoggerRegistry } from '@jupyterlab/logconsole';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { KernelMessage } from '@jupyterlab/services';\n/**\n * The Log Console extension.\n */\nexport const logNotebookOutput = {\n    activate: activateNBOutput,\n    id: '@jupyterlab/notebook-extension:log-output',\n    requires: [INotebookTracker],\n    optional: [ILoggerRegistry],\n    autoStart: true\n};\nfunction activateNBOutput(app, nbtracker, loggerRegistry) {\n    if (!loggerRegistry) {\n        // Automatically disable if logconsole is missing\n        return;\n    }\n    function registerNB(nb) {\n        function logOutput(msg, levelNormal, levelError) {\n            if (KernelMessage.isDisplayDataMsg(msg) ||\n                KernelMessage.isStreamMsg(msg) ||\n                KernelMessage.isErrorMsg(msg) ||\n                KernelMessage.isExecuteResultMsg(msg)) {\n                const logger = loggerRegistry.getLogger(nb.context.path);\n                logger.rendermime = nb.content.rendermime;\n                const data = Object.assign(Object.assign({}, msg.content), { output_type: msg.header.msg_type });\n                let level = levelNormal;\n                if (KernelMessage.isErrorMsg(msg) ||\n                    (KernelMessage.isStreamMsg(msg) && msg.content.name === 'stderr')) {\n                    level = levelError;\n                }\n                logger.log({ type: 'output', data, level });\n            }\n        }\n        // There is overlap here since unhandled messages are also emitted in the\n        // iopubMessage signal. However, unhandled messages warrant a higher log\n        // severity, so we'll accept that they are logged twice.\n        nb.context.sessionContext.iopubMessage.connect((_, msg) => logOutput(msg, 'info', 'info'));\n        nb.context.sessionContext.unhandledMessage.connect((_, msg) => logOutput(msg, 'warning', 'error'));\n    }\n    nbtracker.forEach(nb => registerNB(nb));\n    nbtracker.widgetAdded.connect((_, nb) => registerNB(nb));\n}\n//# sourceMappingURL=nboutput.js.map","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/**\n * @packageDocumentation\n * @module notebook-extension\n */\nimport { ILayoutRestorer } from '@jupyterlab/application';\nimport { Dialog, ICommandPalette, InputDialog, ISessionContextDialogs, MainAreaWidget, sessionContextDialogs, showDialog, WidgetTracker } from '@jupyterlab/apputils';\nimport { MarkdownCell } from '@jupyterlab/cells';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { CommandEditStatus, INotebookTools, INotebookTracker, INotebookWidgetFactory, NotebookActions, NotebookModelFactory, NotebookPanel, NotebookTools, NotebookTracker, NotebookTrustStatus, NotebookWidgetFactory, StaticNotebook } from '@jupyterlab/notebook';\nimport { IPropertyInspectorProvider } from '@jupyterlab/property-inspector';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { buildIcon, notebookIcon } from '@jupyterlab/ui-components';\nimport { ArrayExt } from '@lumino/algorithm';\nimport { JSONExt, UUID } from '@lumino/coreutils';\nimport { DisposableSet } from '@lumino/disposable';\nimport { MessageLoop } from '@lumino/messaging';\nimport { Panel } from '@lumino/widgets';\nimport { logNotebookOutput } from './nboutput';\n/**\n * The command IDs used by the notebook plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.createNew = 'notebook:create-new';\n    CommandIDs.interrupt = 'notebook:interrupt-kernel';\n    CommandIDs.restart = 'notebook:restart-kernel';\n    CommandIDs.restartClear = 'notebook:restart-clear-output';\n    CommandIDs.restartAndRunToSelected = 'notebook:restart-and-run-to-selected';\n    CommandIDs.restartRunAll = 'notebook:restart-run-all';\n    CommandIDs.reconnectToKernel = 'notebook:reconnect-to-kernel';\n    CommandIDs.changeKernel = 'notebook:change-kernel';\n    CommandIDs.createConsole = 'notebook:create-console';\n    CommandIDs.createOutputView = 'notebook:create-output-view';\n    CommandIDs.clearAllOutputs = 'notebook:clear-all-cell-outputs';\n    CommandIDs.closeAndShutdown = 'notebook:close-and-shutdown';\n    CommandIDs.trust = 'notebook:trust';\n    CommandIDs.exportToFormat = 'notebook:export-to-format';\n    CommandIDs.run = 'notebook:run-cell';\n    CommandIDs.runAndAdvance = 'notebook:run-cell-and-select-next';\n    CommandIDs.runAndInsert = 'notebook:run-cell-and-insert-below';\n    CommandIDs.runInConsole = 'notebook:run-in-console';\n    CommandIDs.runAll = 'notebook:run-all-cells';\n    CommandIDs.runAllAbove = 'notebook:run-all-above';\n    CommandIDs.runAllBelow = 'notebook:run-all-below';\n    CommandIDs.renderAllMarkdown = 'notebook:render-all-markdown';\n    CommandIDs.toCode = 'notebook:change-cell-to-code';\n    CommandIDs.toMarkdown = 'notebook:change-cell-to-markdown';\n    CommandIDs.toRaw = 'notebook:change-cell-to-raw';\n    CommandIDs.cut = 'notebook:cut-cell';\n    CommandIDs.copy = 'notebook:copy-cell';\n    CommandIDs.pasteAbove = 'notebook:paste-cell-above';\n    CommandIDs.pasteBelow = 'notebook:paste-cell-below';\n    CommandIDs.pasteAndReplace = 'notebook:paste-and-replace-cell';\n    CommandIDs.moveUp = 'notebook:move-cell-up';\n    CommandIDs.moveDown = 'notebook:move-cell-down';\n    CommandIDs.clearOutputs = 'notebook:clear-cell-output';\n    CommandIDs.deleteCell = 'notebook:delete-cell';\n    CommandIDs.insertAbove = 'notebook:insert-cell-above';\n    CommandIDs.insertBelow = 'notebook:insert-cell-below';\n    CommandIDs.selectAbove = 'notebook:move-cursor-up';\n    CommandIDs.selectBelow = 'notebook:move-cursor-down';\n    CommandIDs.extendAbove = 'notebook:extend-marked-cells-above';\n    CommandIDs.extendTop = 'notebook:extend-marked-cells-top';\n    CommandIDs.extendBelow = 'notebook:extend-marked-cells-below';\n    CommandIDs.extendBottom = 'notebook:extend-marked-cells-bottom';\n    CommandIDs.selectAll = 'notebook:select-all';\n    CommandIDs.deselectAll = 'notebook:deselect-all';\n    CommandIDs.editMode = 'notebook:enter-edit-mode';\n    CommandIDs.merge = 'notebook:merge-cells';\n    CommandIDs.mergeAbove = 'notebook:merge-cell-above';\n    CommandIDs.mergeBelow = 'notebook:merge-cell-below';\n    CommandIDs.split = 'notebook:split-cell-at-cursor';\n    CommandIDs.commandMode = 'notebook:enter-command-mode';\n    CommandIDs.toggleAllLines = 'notebook:toggle-all-cell-line-numbers';\n    CommandIDs.undoCellAction = 'notebook:undo-cell-action';\n    CommandIDs.redoCellAction = 'notebook:redo-cell-action';\n    CommandIDs.markdown1 = 'notebook:change-cell-to-heading-1';\n    CommandIDs.markdown2 = 'notebook:change-cell-to-heading-2';\n    CommandIDs.markdown3 = 'notebook:change-cell-to-heading-3';\n    CommandIDs.markdown4 = 'notebook:change-cell-to-heading-4';\n    CommandIDs.markdown5 = 'notebook:change-cell-to-heading-5';\n    CommandIDs.markdown6 = 'notebook:change-cell-to-heading-6';\n    CommandIDs.hideCode = 'notebook:hide-cell-code';\n    CommandIDs.showCode = 'notebook:show-cell-code';\n    CommandIDs.hideAllCode = 'notebook:hide-all-cell-code';\n    CommandIDs.showAllCode = 'notebook:show-all-cell-code';\n    CommandIDs.hideOutput = 'notebook:hide-cell-outputs';\n    CommandIDs.showOutput = 'notebook:show-cell-outputs';\n    CommandIDs.hideAllOutputs = 'notebook:hide-all-cell-outputs';\n    CommandIDs.showAllOutputs = 'notebook:show-all-cell-outputs';\n    CommandIDs.toggleRenderSideBySide = 'notebook:toggle-render-side-by-side';\n    CommandIDs.setSideBySideRatio = 'notebook:set-side-by-side-ratio';\n    CommandIDs.enableOutputScrolling = 'notebook:enable-output-scrolling';\n    CommandIDs.disableOutputScrolling = 'notebook:disable-output-scrolling';\n    CommandIDs.selectLastRunCell = 'notebook:select-last-run-cell';\n    CommandIDs.replaceSelection = 'notebook:replace-selection';\n    CommandIDs.autoClosingBrackets = 'notebook:toggle-autoclosing-brackets';\n    CommandIDs.toggleCollapseCmd = 'Collapsible_Headings:Toggle_Collapse';\n    CommandIDs.collapseAllCmd = 'Collapsible_Headings:Collapse_All';\n    CommandIDs.expandAllCmd = 'Collapsible_Headings:Expand_All';\n    CommandIDs.copyToClipboard = 'notebook:copy-to-clipboard';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The name of the factory that creates notebooks.\n */\nconst FACTORY = 'Notebook';\n/**\n * The excluded Export To ...\n * (returned from nbconvert's export list)\n */\nconst FORMAT_EXCLUDE = ['notebook', 'python', 'custom'];\n/**\n * The notebook widget tracker provider.\n */\nconst trackerPlugin = {\n    id: '@jupyterlab/notebook-extension:tracker',\n    provides: INotebookTracker,\n    requires: [INotebookWidgetFactory, ITranslator],\n    optional: [\n        ICommandPalette,\n        IFileBrowserFactory,\n        ILauncher,\n        ILayoutRestorer,\n        IMainMenu,\n        ISettingRegistry,\n        ISessionContextDialogs\n    ],\n    activate: activateNotebookHandler,\n    autoStart: true\n};\n/**\n * The notebook cell factory provider.\n */\nconst factory = {\n    id: '@jupyterlab/notebook-extension:factory',\n    provides: NotebookPanel.IContentFactory,\n    requires: [IEditorServices],\n    autoStart: true,\n    activate: (app, editorServices) => {\n        const editorFactory = editorServices.factoryService.newInlineEditor;\n        return new NotebookPanel.ContentFactory({ editorFactory });\n    }\n};\n/**\n * The notebook tools extension.\n */\nconst tools = {\n    activate: activateNotebookTools,\n    provides: INotebookTools,\n    id: '@jupyterlab/notebook-extension:tools',\n    autoStart: true,\n    requires: [INotebookTracker, IEditorServices, IStateDB, ITranslator],\n    optional: [IPropertyInspectorProvider]\n};\n/**\n * A plugin providing a CommandEdit status item.\n */\nexport const commandEditItem = {\n    id: '@jupyterlab/notebook-extension:mode-status',\n    autoStart: true,\n    requires: [INotebookTracker, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, tracker, translator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const { shell } = app;\n        const item = new CommandEditStatus(translator);\n        // Keep the status item up-to-date with the current notebook.\n        tracker.currentChanged.connect(() => {\n            const current = tracker.currentWidget;\n            item.model.notebook = current && current.content;\n        });\n        statusBar.registerStatusItem('@jupyterlab/notebook-extension:mode-status', {\n            item,\n            align: 'right',\n            rank: 4,\n            isActive: () => !!shell.currentWidget &&\n                !!tracker.currentWidget &&\n                shell.currentWidget === tracker.currentWidget\n        });\n    }\n};\n/**\n * A plugin providing export commands in the main menu and command palette\n */\nexport const exportPlugin = {\n    id: '@jupyterlab/notebook-extension:export',\n    autoStart: true,\n    requires: [ITranslator, INotebookTracker],\n    optional: [IMainMenu, ICommandPalette],\n    activate: (app, translator, tracker, mainMenu, palette) => {\n        var _a;\n        const trans = translator.load('jupyterlab');\n        const { commands, shell } = app;\n        const services = app.serviceManager;\n        const isEnabled = () => {\n            return Private.isEnabled(shell, tracker);\n        };\n        commands.addCommand(CommandIDs.exportToFormat, {\n            label: args => {\n                const formatLabel = args['label'];\n                return args['isPalette']\n                    ? trans.__('Save and Export Notebook: %1', formatLabel)\n                    : formatLabel;\n            },\n            execute: args => {\n                const current = getCurrent(tracker, shell, args);\n                if (!current) {\n                    return;\n                }\n                const url = PageConfig.getNBConvertURL({\n                    format: args['format'],\n                    download: true,\n                    path: current.context.path\n                });\n                const { context } = current;\n                if (context.model.dirty && !context.model.readOnly) {\n                    return context.save().then(() => {\n                        window.open(url, '_blank', 'noopener');\n                    });\n                }\n                return new Promise(resolve => {\n                    window.open(url, '_blank', 'noopener');\n                    resolve(undefined);\n                });\n            },\n            isEnabled\n        });\n        // Add a notebook group to the File menu.\n        let exportTo;\n        if (mainMenu) {\n            exportTo = (_a = mainMenu.fileMenu.items.find(item => {\n                var _a;\n                return item.type === 'submenu' &&\n                    ((_a = item.submenu) === null || _a === void 0 ? void 0 : _a.id) === 'jp-mainmenu-file-notebookexport';\n            })) === null || _a === void 0 ? void 0 : _a.submenu;\n        }\n        void services.nbconvert.getExportFormats().then(response => {\n            if (response) {\n                const formatLabels = Private.getFormatLabels(translator);\n                // Convert export list to palette and menu items.\n                const formatList = Object.keys(response);\n                formatList.forEach(function (key) {\n                    const capCaseKey = trans.__(key[0].toUpperCase() + key.substr(1));\n                    const labelStr = formatLabels[key] ? formatLabels[key] : capCaseKey;\n                    let args = {\n                        format: key,\n                        label: labelStr,\n                        isPalette: false\n                    };\n                    if (FORMAT_EXCLUDE.indexOf(key) === -1) {\n                        if (exportTo) {\n                            exportTo.addItem({\n                                command: CommandIDs.exportToFormat,\n                                args: args\n                            });\n                        }\n                        if (palette) {\n                            args = {\n                                format: key,\n                                label: labelStr,\n                                isPalette: true\n                            };\n                            const category = trans.__('Notebook Operations');\n                            palette.addItem({\n                                command: CommandIDs.exportToFormat,\n                                category,\n                                args\n                            });\n                        }\n                    }\n                });\n            }\n        });\n    }\n};\n/**\n * A plugin that adds a notebook trust status item to the status bar.\n */\nexport const notebookTrustItem = {\n    id: '@jupyterlab/notebook-extension:trust-status',\n    autoStart: true,\n    requires: [INotebookTracker, ITranslator],\n    optional: [IStatusBar],\n    activate: (app, tracker, tranlator, statusBar) => {\n        if (!statusBar) {\n            // Automatically disable if statusbar missing\n            return;\n        }\n        const { shell } = app;\n        const item = new NotebookTrustStatus(tranlator);\n        // Keep the status item up-to-date with the current notebook.\n        tracker.currentChanged.connect(() => {\n            const current = tracker.currentWidget;\n            item.model.notebook = current && current.content;\n        });\n        statusBar.registerStatusItem('@jupyterlab/notebook-extension:trust-status', {\n            item,\n            align: 'right',\n            rank: 3,\n            isActive: () => !!shell.currentWidget &&\n                !!tracker.currentWidget &&\n                shell.currentWidget === tracker.currentWidget\n        });\n    }\n};\n/**\n * The notebook widget factory provider.\n */\nconst widgetFactoryPlugin = {\n    id: '@jupyterlab/notebook-extension:widget-factory',\n    provides: INotebookWidgetFactory,\n    requires: [\n        NotebookPanel.IContentFactory,\n        IEditorServices,\n        IRenderMimeRegistry,\n        ISessionContextDialogs,\n        ITranslator\n    ],\n    activate: activateWidgetFactory,\n    autoStart: true\n};\n/**\n * The cloned output provider.\n */\nconst clonedOutputsPlugin = {\n    id: '@jupyterlab/notebook-extension:cloned-outputs',\n    requires: [IDocumentManager, INotebookTracker, ITranslator],\n    optional: [ILayoutRestorer],\n    activate: activateClonedOutputs,\n    autoStart: true\n};\n/**\n * A plugin for code consoles functionalities.\n */\nconst codeConsolePlugin = {\n    id: '@jupyterlab/notebook-extension:code-console',\n    requires: [INotebookTracker, ITranslator],\n    activate: activateCodeConsole,\n    autoStart: true\n};\n/**\n * A plugin to copy CodeCell outputs.\n */\nconst copyOutputPlugin = {\n    id: '@jupyterlab/notebook-extensions:copy-output',\n    activate: activateCopyOutput,\n    requires: [ITranslator, INotebookTracker],\n    autoStart: true\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [\n    factory,\n    trackerPlugin,\n    exportPlugin,\n    tools,\n    commandEditItem,\n    notebookTrustItem,\n    widgetFactoryPlugin,\n    logNotebookOutput,\n    clonedOutputsPlugin,\n    codeConsolePlugin,\n    copyOutputPlugin\n];\nexport default plugins;\n/**\n * Activate the notebook tools extension.\n */\nfunction activateNotebookTools(app, tracker, editorServices, state, translator, inspectorProvider) {\n    const trans = translator.load('jupyterlab');\n    const id = 'notebook-tools';\n    const notebookTools = new NotebookTools({ tracker, translator });\n    const activeCellTool = new NotebookTools.ActiveCellTool();\n    const slideShow = NotebookTools.createSlideShowSelector(translator);\n    const editorFactory = editorServices.factoryService.newInlineEditor;\n    const cellMetadataEditor = new NotebookTools.CellMetadataEditorTool({\n        editorFactory,\n        collapsed: false,\n        translator\n    });\n    const notebookMetadataEditor = new NotebookTools.NotebookMetadataEditorTool({\n        editorFactory,\n        translator\n    });\n    const services = app.serviceManager;\n    // Create message hook for triggers to save to the database.\n    const hook = (sender, message) => {\n        switch (message.type) {\n            case 'activate-request':\n                void state.save(id, { open: true });\n                break;\n            case 'after-hide':\n            case 'close-request':\n                void state.remove(id);\n                break;\n            default:\n                break;\n        }\n        return true;\n    };\n    const optionsMap = {};\n    optionsMap.None = null;\n    void services.nbconvert.getExportFormats().then(response => {\n        if (response) {\n            /**\n             * The excluded Cell Inspector Raw NbConvert Formats\n             * (returned from nbconvert's export list)\n             */\n            const rawFormatExclude = [\n                'pdf',\n                'slides',\n                'script',\n                'notebook',\n                'custom'\n            ];\n            let optionValueArray = [\n                [trans.__('PDF'), 'pdf'],\n                [trans.__('Slides'), 'slides'],\n                [trans.__('Script'), 'script'],\n                [trans.__('Notebook'), 'notebook'],\n                [trans.__('Custom'), 'custom']\n            ];\n            // convert exportList to palette and menu items\n            const formatList = Object.keys(response);\n            const formatLabels = Private.getFormatLabels(translator);\n            formatList.forEach(function (key) {\n                if (rawFormatExclude.indexOf(key) === -1) {\n                    const altOption = trans.__(key[0].toUpperCase() + key.substr(1));\n                    const option = formatLabels[key] ? formatLabels[key] : altOption;\n                    const mimeTypeValue = response[key].output_mimetype;\n                    optionValueArray.push([option, mimeTypeValue]);\n                }\n            });\n            const nbConvert = NotebookTools.createNBConvertSelector(optionValueArray, translator);\n            notebookTools.addItem({ tool: nbConvert, section: 'common', rank: 3 });\n        }\n    });\n    notebookTools.title.icon = buildIcon;\n    notebookTools.title.caption = trans.__('Notebook Tools');\n    notebookTools.id = id;\n    notebookTools.addItem({ tool: activeCellTool, section: 'common', rank: 1 });\n    notebookTools.addItem({ tool: slideShow, section: 'common', rank: 2 });\n    notebookTools.addItem({\n        tool: cellMetadataEditor,\n        section: 'advanced',\n        rank: 1\n    });\n    notebookTools.addItem({\n        tool: notebookMetadataEditor,\n        section: 'advanced',\n        rank: 2\n    });\n    MessageLoop.installMessageHook(notebookTools, hook);\n    if (inspectorProvider) {\n        tracker.widgetAdded.connect((sender, panel) => {\n            const inspector = inspectorProvider.register(panel);\n            inspector.render(notebookTools);\n        });\n    }\n    return notebookTools;\n}\n/**\n * Activate the notebook widget factory.\n */\nfunction activateWidgetFactory(app, contentFactory, editorServices, rendermime, sessionContextDialogs, translator) {\n    const factory = new NotebookWidgetFactory({\n        name: FACTORY,\n        fileTypes: ['notebook'],\n        modelName: 'notebook',\n        defaultFor: ['notebook'],\n        preferKernel: true,\n        canStartKernel: true,\n        rendermime: rendermime,\n        contentFactory,\n        editorConfig: StaticNotebook.defaultEditorConfig,\n        notebookConfig: StaticNotebook.defaultNotebookConfig,\n        mimeTypeService: editorServices.mimeTypeService,\n        sessionDialogs: sessionContextDialogs,\n        translator: translator\n    });\n    app.docRegistry.addWidgetFactory(factory);\n    return factory;\n}\n/**\n * Activate the plugin to create and track cloned outputs.\n */\nfunction activateClonedOutputs(app, docManager, notebookTracker, translator, restorer) {\n    const trans = translator.load('jupyterlab');\n    const clonedOutputs = new WidgetTracker({\n        namespace: 'cloned-outputs'\n    });\n    if (restorer) {\n        void restorer.restore(clonedOutputs, {\n            command: CommandIDs.createOutputView,\n            args: widget => ({\n                path: widget.content.path,\n                index: widget.content.index\n            }),\n            name: widget => `${widget.content.path}:${widget.content.index}`,\n            when: notebookTracker.restored // After the notebook widgets (but not contents).\n        });\n    }\n    const { commands, shell } = app;\n    const isEnabledAndSingleSelected = () => {\n        return Private.isEnabledAndSingleSelected(shell, notebookTracker);\n    };\n    commands.addCommand(CommandIDs.createOutputView, {\n        label: trans.__('Create New View for Output'),\n        execute: async (args) => {\n            var _a;\n            let cell;\n            let current;\n            // If we are given a notebook path and cell index, then\n            // use that, otherwise use the current active cell.\n            const path = args.path;\n            let index = args.index;\n            if (path && index !== undefined && index !== null) {\n                current = docManager.findWidget(path, FACTORY);\n                if (!current) {\n                    return;\n                }\n            }\n            else {\n                current = notebookTracker.currentWidget;\n                if (!current) {\n                    return;\n                }\n                cell = current.content.activeCell;\n                index = current.content.activeCellIndex;\n            }\n            // Create a MainAreaWidget\n            const content = new Private.ClonedOutputArea({\n                notebook: current,\n                cell,\n                index,\n                translator\n            });\n            const widget = new MainAreaWidget({ content });\n            current.context.addSibling(widget, {\n                ref: current.id,\n                mode: 'split-bottom'\n            });\n            const updateCloned = () => {\n                void clonedOutputs.save(widget);\n            };\n            current.context.pathChanged.connect(updateCloned);\n            (_a = current.context.model) === null || _a === void 0 ? void 0 : _a.cells.changed.connect(updateCloned);\n            // Add the cloned output to the output widget tracker.\n            void clonedOutputs.add(widget);\n            // Remove the output view if the parent notebook is closed.\n            current.content.disposed.connect(() => {\n                var _a;\n                current.context.pathChanged.disconnect(updateCloned);\n                (_a = current.context.model) === null || _a === void 0 ? void 0 : _a.cells.changed.disconnect(updateCloned);\n                widget.dispose();\n            });\n        },\n        isEnabled: isEnabledAndSingleSelected\n    });\n}\n/**\n * Activate the plugin to add code console functionalities\n */\nfunction activateCodeConsole(app, tracker, translator) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    const isEnabled = () => Private.isEnabled(shell, tracker);\n    commands.addCommand(CommandIDs.createConsole, {\n        label: trans.__('New Console for Notebook'),\n        execute: args => {\n            const current = tracker.currentWidget;\n            if (!current) {\n                return;\n            }\n            return Private.createConsole(commands, current, args['activate']);\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runInConsole, {\n        label: trans.__('Run Selected Text or Current Line in Console'),\n        execute: async (args) => {\n            var _a, _b;\n            // Default to not activating the notebook (thereby putting the notebook\n            // into command mode)\n            const current = tracker.currentWidget;\n            if (!current) {\n                return;\n            }\n            const { context, content } = current;\n            const cell = content.activeCell;\n            const metadata = cell === null || cell === void 0 ? void 0 : cell.model.metadata.toJSON();\n            const path = context.path;\n            // ignore action in non-code cell\n            if (!cell || cell.model.type !== 'code') {\n                return;\n            }\n            let code;\n            const editor = cell.editor;\n            const selection = editor.getSelection();\n            const { start, end } = selection;\n            const selected = start.column !== end.column || start.line !== end.line;\n            if (selected) {\n                // Get the selected code from the editor.\n                const start = editor.getOffsetAt(selection.start);\n                const end = editor.getOffsetAt(selection.end);\n                code = editor.model.value.text.substring(start, end);\n            }\n            else {\n                // no selection, find the complete statement around the current line\n                const cursor = editor.getCursorPosition();\n                const srcLines = editor.model.value.text.split('\\n');\n                let curLine = selection.start.line;\n                while (curLine < editor.lineCount &&\n                    !srcLines[curLine].replace(/\\s/g, '').length) {\n                    curLine += 1;\n                }\n                // if curLine > 0, we first do a search from beginning\n                let fromFirst = curLine > 0;\n                let firstLine = 0;\n                let lastLine = firstLine + 1;\n                // eslint-disable-next-line\n                while (true) {\n                    code = srcLines.slice(firstLine, lastLine).join('\\n');\n                    const reply = await ((_b = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel) === null || _b === void 0 ? void 0 : _b.requestIsComplete({\n                        // ipython needs an empty line at the end to correctly identify completeness of indented code\n                        code: code + '\\n\\n'\n                    }));\n                    if ((reply === null || reply === void 0 ? void 0 : reply.content.status) === 'complete') {\n                        if (curLine < lastLine) {\n                            // we find a block of complete statement containing the current line, great!\n                            while (lastLine < editor.lineCount &&\n                                !srcLines[lastLine].replace(/\\s/g, '').length) {\n                                lastLine += 1;\n                            }\n                            editor.setCursorPosition({\n                                line: lastLine,\n                                column: cursor.column\n                            });\n                            break;\n                        }\n                        else {\n                            // discard the complete statement before the current line and continue\n                            firstLine = lastLine;\n                            lastLine = firstLine + 1;\n                        }\n                    }\n                    else if (lastLine < editor.lineCount) {\n                        // if incomplete and there are more lines, add the line and check again\n                        lastLine += 1;\n                    }\n                    else if (fromFirst) {\n                        // we search from the first line and failed, we search again from current line\n                        firstLine = curLine;\n                        lastLine = curLine + 1;\n                        fromFirst = false;\n                    }\n                    else {\n                        // if we have searched both from first line and from current line and we\n                        // cannot find anything, we submit the current line.\n                        code = srcLines[curLine];\n                        while (curLine + 1 < editor.lineCount &&\n                            !srcLines[curLine + 1].replace(/\\s/g, '').length) {\n                            curLine += 1;\n                        }\n                        editor.setCursorPosition({\n                            line: curLine + 1,\n                            column: cursor.column\n                        });\n                        break;\n                    }\n                }\n            }\n            if (!code) {\n                return;\n            }\n            await commands.execute('console:open', {\n                activate: false,\n                insertMode: 'split-bottom',\n                path\n            });\n            await commands.execute('console:inject', {\n                activate: false,\n                code,\n                path,\n                metadata\n            });\n        },\n        isEnabled\n    });\n}\n/**\n * Activate the output copying extension\n */\nfunction activateCopyOutput(app, translator, tracker) {\n    const trans = translator.load('jupyterlab');\n    /**\n     * Copy the contents of an HTMLElement to the system clipboard\n     */\n    function copyElement(e) {\n        const sel = window.getSelection();\n        if (sel == null) {\n            return;\n        }\n        // Save the current selection.\n        const savedRanges = [];\n        for (let i = 0; i < sel.rangeCount; ++i) {\n            savedRanges[i] = sel.getRangeAt(i).cloneRange();\n        }\n        const range = document.createRange();\n        range.selectNodeContents(e);\n        sel.removeAllRanges();\n        sel.addRange(range);\n        document.execCommand('copy');\n        // Restore the saved selection.\n        sel.removeAllRanges();\n        savedRanges.forEach(r => sel.addRange(r));\n    }\n    app.commands.addCommand(CommandIDs.copyToClipboard, {\n        label: trans.__('Copy Output to Clipboard'),\n        execute: args => {\n            var _a;\n            const cell = (_a = tracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content.activeCell;\n            if (cell == null) {\n                return;\n            }\n            const output = cell.outputArea.outputTracker.currentWidget;\n            if (output == null) {\n                return;\n            }\n            const outputAreaAreas = output.node.getElementsByClassName('jp-OutputArea-output');\n            if (outputAreaAreas.length > 0) {\n                const area = outputAreaAreas[0];\n                copyElement(area);\n            }\n        }\n    });\n    app.contextMenu.addItem({\n        command: CommandIDs.copyToClipboard,\n        selector: '.jp-OutputArea-child',\n        rank: 0\n    });\n}\n/**\n * Activate the notebook handler extension.\n */\nfunction activateNotebookHandler(app, factory, translator, palette, browserFactory, launcher, restorer, mainMenu, settingRegistry, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const services = app.serviceManager;\n    const { commands } = app;\n    const tracker = new NotebookTracker({ namespace: 'notebook' });\n    // Fetch settings if possible.\n    const fetchSettings = settingRegistry\n        ? settingRegistry.load(trackerPlugin.id)\n        : Promise.reject(new Error(`No setting registry for ${trackerPlugin.id}`));\n    // Handle state restoration.\n    if (restorer) {\n        fetchSettings\n            .then(settings => {\n            updateConfig(settings);\n            settings.changed.connect(() => {\n                updateConfig(settings);\n            });\n            commands.addCommand(CommandIDs.autoClosingBrackets, {\n                execute: args => {\n                    var _a;\n                    const codeConfig = settings.get('codeCellConfig')\n                        .composite;\n                    const markdownConfig = settings.get('markdownCellConfig')\n                        .composite;\n                    const rawConfig = settings.get('rawCellConfig')\n                        .composite;\n                    const anyToggled = codeConfig.autoClosingBrackets ||\n                        markdownConfig.autoClosingBrackets ||\n                        rawConfig.autoClosingBrackets;\n                    const toggled = !!((_a = args['force']) !== null && _a !== void 0 ? _a : !anyToggled);\n                    [\n                        codeConfig.autoClosingBrackets,\n                        markdownConfig.autoClosingBrackets,\n                        rawConfig.autoClosingBrackets\n                    ] = [toggled, toggled, toggled];\n                    void settings.set('codeCellConfig', codeConfig);\n                    void settings.set('markdownCellConfig', markdownConfig);\n                    void settings.set('rawCellConfig', rawConfig);\n                },\n                label: trans.__('Auto Close Brackets for All Notebook Cell Types'),\n                isToggled: () => ['codeCellConfig', 'markdownCellConfig', 'rawCellConfig'].some(x => settings.get(x).composite.autoClosingBrackets)\n            });\n        })\n            .catch((reason) => {\n            console.warn(reason.message);\n            updateTracker({\n                editorConfig: factory.editorConfig,\n                notebookConfig: factory.notebookConfig,\n                kernelShutdown: factory.shutdownOnClose\n            });\n        });\n        void restorer.restore(tracker, {\n            command: 'docmanager:open',\n            args: panel => ({ path: panel.context.path, factory: FACTORY }),\n            name: panel => panel.context.path,\n            when: services.ready\n        });\n    }\n    const registry = app.docRegistry;\n    const modelFactory = new NotebookModelFactory({\n        disableDocumentWideUndoRedo: factory.notebookConfig.disableDocumentWideUndoRedo\n    });\n    registry.addModelFactory(modelFactory);\n    addCommands(app, tracker, translator, sessionDialogs);\n    if (palette) {\n        populatePalette(palette, translator);\n    }\n    let id = 0; // The ID counter for notebook panels.\n    const ft = app.docRegistry.getFileType('notebook');\n    factory.widgetCreated.connect((sender, widget) => {\n        var _a, _b;\n        // If the notebook panel does not have an ID, assign it one.\n        widget.id = widget.id || `notebook-${++id}`;\n        // Set up the title icon\n        widget.title.icon = ft === null || ft === void 0 ? void 0 : ft.icon;\n        widget.title.iconClass = (_a = ft === null || ft === void 0 ? void 0 : ft.iconClass) !== null && _a !== void 0 ? _a : '';\n        widget.title.iconLabel = (_b = ft === null || ft === void 0 ? void 0 : ft.iconLabel) !== null && _b !== void 0 ? _b : '';\n        // Notify the widget tracker if restore data needs to update.\n        widget.context.pathChanged.connect(() => {\n            void tracker.save(widget);\n        });\n        // Add the notebook panel to the tracker.\n        void tracker.add(widget);\n    });\n    /**\n     * Update the settings of the current tracker.\n     */\n    function updateTracker(options) {\n        tracker.forEach(widget => {\n            widget.setConfig(options);\n        });\n    }\n    /**\n     * Update the setting values.\n     */\n    function updateConfig(settings) {\n        const code = Object.assign(Object.assign({}, StaticNotebook.defaultEditorConfig.code), settings.get('codeCellConfig').composite);\n        const markdown = Object.assign(Object.assign({}, StaticNotebook.defaultEditorConfig.markdown), settings.get('markdownCellConfig').composite);\n        const raw = Object.assign(Object.assign({}, StaticNotebook.defaultEditorConfig.raw), settings.get('rawCellConfig').composite);\n        factory.editorConfig = { code, markdown, raw };\n        factory.notebookConfig = {\n            scrollPastEnd: settings.get('scrollPastEnd').composite,\n            defaultCell: settings.get('defaultCell').composite,\n            recordTiming: settings.get('recordTiming').composite,\n            numberCellsToRenderDirectly: settings.get('numberCellsToRenderDirectly')\n                .composite,\n            renderCellOnIdle: settings.get('renderCellOnIdle').composite,\n            observedTopMargin: settings.get('observedTopMargin').composite,\n            observedBottomMargin: settings.get('observedBottomMargin')\n                .composite,\n            maxNumberOutputs: settings.get('maxNumberOutputs').composite,\n            disableDocumentWideUndoRedo: settings.get('experimentalDisableDocumentWideUndoRedo').composite\n        };\n        factory.shutdownOnClose = settings.get('kernelShutdown')\n            .composite;\n        modelFactory.disableDocumentWideUndoRedo = settings.get('experimentalDisableDocumentWideUndoRedo').composite;\n        updateTracker({\n            editorConfig: factory.editorConfig,\n            notebookConfig: factory.notebookConfig,\n            kernelShutdown: factory.shutdownOnClose\n        });\n    }\n    // Add main menu notebook menu.\n    if (mainMenu) {\n        populateMenus(app, mainMenu, tracker, translator, sessionDialogs);\n    }\n    // Utility function to create a new notebook.\n    const createNew = (cwd, kernelName) => {\n        return commands\n            .execute('docmanager:new-untitled', { path: cwd, type: 'notebook' })\n            .then(model => {\n            if (model != undefined) {\n                return commands.execute('docmanager:open', {\n                    path: model.path,\n                    factory: FACTORY,\n                    kernel: { name: kernelName }\n                });\n            }\n        });\n    };\n    // Add a command for creating a new notebook.\n    commands.addCommand(CommandIDs.createNew, {\n        label: args => {\n            var _a, _b, _c;\n            const kernelName = args['kernelName'] || '';\n            if (args['isLauncher'] && args['kernelName'] && services.kernelspecs) {\n                return ((_c = (_b = (_a = services.kernelspecs.specs) === null || _a === void 0 ? void 0 : _a.kernelspecs[kernelName]) === null || _b === void 0 ? void 0 : _b.display_name) !== null && _c !== void 0 ? _c : '');\n            }\n            if (args['isPalette']) {\n                return trans.__('New Notebook');\n            }\n            return trans.__('Notebook');\n        },\n        caption: trans.__('Create a new notebook'),\n        icon: args => (args['isPalette'] ? undefined : notebookIcon),\n        execute: args => {\n            const cwd = args['cwd'] ||\n                (browserFactory ? browserFactory.defaultBrowser.model.path : '');\n            const kernelName = args['kernelName'] || '';\n            return createNew(cwd, kernelName);\n        }\n    });\n    // Add a launcher item if the launcher is available.\n    if (launcher) {\n        void services.ready.then(() => {\n            let disposables = null;\n            const onSpecsChanged = () => {\n                if (disposables) {\n                    disposables.dispose();\n                    disposables = null;\n                }\n                const specs = services.kernelspecs.specs;\n                if (!specs) {\n                    return;\n                }\n                disposables = new DisposableSet();\n                for (const name in specs.kernelspecs) {\n                    const rank = name === specs.default ? 0 : Infinity;\n                    const spec = specs.kernelspecs[name];\n                    let kernelIconUrl = spec.resources['logo-64x64'];\n                    disposables.add(launcher.add({\n                        command: CommandIDs.createNew,\n                        args: { isLauncher: true, kernelName: name },\n                        category: trans.__('Notebook'),\n                        rank,\n                        kernelIconUrl,\n                        metadata: {\n                            kernel: JSONExt.deepCopy(spec.metadata || {})\n                        }\n                    }));\n                }\n            };\n            onSpecsChanged();\n            services.kernelspecs.specsChanged.connect(onSpecsChanged);\n        });\n    }\n    return tracker;\n}\n// Get the current widget and activate unless the args specify otherwise.\nfunction getCurrent(tracker, shell, args) {\n    const widget = tracker.currentWidget;\n    const activate = args['activate'] !== false;\n    if (activate && widget) {\n        shell.activateById(widget.id);\n    }\n    return widget;\n}\n/**\n * Add the notebook commands to the application's command registry.\n */\nfunction addCommands(app, tracker, translator, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n    sessionDialogs = sessionDialogs !== null && sessionDialogs !== void 0 ? sessionDialogs : sessionContextDialogs;\n    const isEnabled = () => {\n        return Private.isEnabled(shell, tracker);\n    };\n    const isEnabledAndSingleSelected = () => {\n        return Private.isEnabledAndSingleSelected(shell, tracker);\n    };\n    const refreshCellCollapsed = (notebook) => {\n        var _a, _b;\n        for (const cell of notebook.widgets) {\n            if (cell instanceof MarkdownCell && cell.headingCollapsed) {\n                NotebookActions.setHeadingCollapse(cell, true, notebook);\n            }\n            if (cell.model.id === ((_b = (_a = notebook.activeCell) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.id)) {\n                NotebookActions.expandParent(cell, notebook);\n            }\n        }\n    };\n    const isEnabledAndHeadingSelected = () => {\n        return Private.isEnabledAndHeadingSelected(shell, tracker);\n    };\n    // Set up collapse signal for each header cell in a notebook\n    tracker.currentChanged.connect((sender, panel) => {\n        var _a, _b;\n        if (!((_b = (_a = panel === null || panel === void 0 ? void 0 : panel.content) === null || _a === void 0 ? void 0 : _a.model) === null || _b === void 0 ? void 0 : _b.cells)) {\n            return;\n        }\n        panel.content.model.cells.changed.connect((list, args) => {\n            const cell = panel.content.widgets[args.newIndex];\n            if (cell instanceof MarkdownCell &&\n                (args.type === 'add' || args.type === 'set')) {\n                cell.toggleCollapsedSignal.connect((newCell, collapsing) => {\n                    NotebookActions.setHeadingCollapse(newCell, collapsing, panel.content);\n                });\n            }\n            // Might be overkill to refresh this every time, but\n            // it helps to keep the collapse state consistent.\n            refreshCellCollapsed(panel.content);\n        });\n        panel.content.activeCellChanged.connect((notebook, cell) => {\n            NotebookActions.expandParent(cell, notebook);\n        });\n    });\n    commands.addCommand(CommandIDs.runAndAdvance, {\n        label: trans.__('Run Selected Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAndAdvance(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.run, {\n        label: trans.__(\"Run Selected Cells and Don't Advance\"),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.run(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAndInsert, {\n        label: trans.__('Run Selected Cells and Insert Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAndInsert(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAll, {\n        label: trans.__('Run All Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAll(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.runAllAbove, {\n        label: trans.__('Run All Above Selected Cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAllAbove(content, context.sessionContext);\n            }\n        },\n        isEnabled: () => {\n            // Can't run above if there are multiple cells selected,\n            // or if we are at the top of the notebook.\n            return (isEnabledAndSingleSelected() &&\n                tracker.currentWidget.content.activeCellIndex !== 0);\n        }\n    });\n    commands.addCommand(CommandIDs.runAllBelow, {\n        label: trans.__('Run Selected Cell and All Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.runAllBelow(content, context.sessionContext);\n            }\n        },\n        isEnabled: () => {\n            // Can't run below if there are multiple cells selected,\n            // or if we are at the bottom of the notebook.\n            return (isEnabledAndSingleSelected() &&\n                tracker.currentWidget.content.activeCellIndex !==\n                    tracker.currentWidget.content.widgets.length - 1);\n        }\n    });\n    commands.addCommand(CommandIDs.renderAllMarkdown, {\n        label: trans.__('Render All Markdown Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.renderAllMarkdown(content, context.sessionContext);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restart, {\n        label: trans.__('Restart Kernel…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return sessionDialogs.restart(current.sessionContext, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.closeAndShutdown, {\n        label: trans.__('Close and Shut Down'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            const fileName = current.title.label;\n            return showDialog({\n                title: trans.__('Shut down the notebook?'),\n                body: trans.__('Are you sure you want to close \"%1\"?', fileName),\n                buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n            }).then(result => {\n                if (result.button.accept) {\n                    return current.context.sessionContext.shutdown().then(() => {\n                        current.dispose();\n                    });\n                }\n            });\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.trust, {\n        label: () => trans.__('Trust Notebook'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return NotebookActions.trust(content).then(() => context.save());\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restartClear, {\n        label: trans.__('Restart Kernel and Clear All Outputs…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { content, sessionContext } = current;\n                return sessionDialogs.restart(sessionContext, translator).then(() => {\n                    NotebookActions.clearAllOutputs(content);\n                });\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.restartAndRunToSelected, {\n        label: trans.__('Restart Kernel and Run up to Selected Cell…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content } = current;\n                return sessionDialogs\n                    .restart(current.sessionContext, translator)\n                    .then(restarted => {\n                    if (restarted) {\n                        void NotebookActions.runAllAbove(content, context.sessionContext).then(executed => {\n                            if (executed || content.activeCellIndex === 0) {\n                                void NotebookActions.run(content, context.sessionContext);\n                            }\n                        });\n                    }\n                });\n            }\n        },\n        isEnabled: isEnabledAndSingleSelected\n    });\n    commands.addCommand(CommandIDs.restartRunAll, {\n        label: trans.__('Restart Kernel and Run All Cells…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                const { context, content, sessionContext } = current;\n                return sessionDialogs\n                    .restart(sessionContext, translator)\n                    .then(restarted => {\n                    if (restarted) {\n                        void NotebookActions.runAll(content, context.sessionContext);\n                    }\n                    return restarted;\n                });\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.clearAllOutputs, {\n        label: trans.__('Clear All Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.clearAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.clearOutputs, {\n        label: trans.__('Clear Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.clearOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.interrupt, {\n        label: trans.__('Interrupt Kernel'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            const kernel = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.interrupt();\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toCode, {\n        label: trans.__('Change to Code Cell Type'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'code');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toMarkdown, {\n        label: trans.__('Change to Markdown Cell Type'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'markdown');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toRaw, {\n        label: trans.__('Change to Raw Cell Type'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.changeCellType(current.content, 'raw');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.cut, {\n        label: trans.__('Cut Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.cut(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.copy, {\n        label: trans.__('Copy Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.copy(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.pasteBelow, {\n        label: trans.__('Paste Cells Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'below');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.pasteAbove, {\n        label: trans.__('Paste Cells Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'above');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.pasteAndReplace, {\n        label: trans.__('Paste Cells and Replace'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.paste(current.content, 'replace');\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.deleteCell, {\n        label: trans.__('Delete Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.deleteCells(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.split, {\n        label: trans.__('Split Cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.splitCell(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.merge, {\n        label: trans.__('Merge Selected Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.mergeAbove, {\n        label: trans.__('Merge Cell Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.mergeBelow, {\n        label: trans.__('Merge Cell Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.mergeCells(current.content, false);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.insertAbove, {\n        label: trans.__('Insert Cell Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.insertAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.insertBelow, {\n        label: trans.__('Insert Cell Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.insertBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectAbove, {\n        label: trans.__('Select Cell Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectBelow, {\n        label: trans.__('Select Cell Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendAbove, {\n        label: trans.__('Extend Selection Above'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionAbove(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendTop, {\n        label: trans.__('Extend Selection to Top'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionAbove(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendBelow, {\n        label: trans.__('Extend Selection Below'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionBelow(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.extendBottom, {\n        label: trans.__('Extend Selection to Bottom'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.extendSelectionBelow(current.content, true);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectAll, {\n        label: trans.__('Select All Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectAll(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.deselectAll, {\n        label: trans.__('Deselect All Cells'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.deselectAll(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.moveUp, {\n        label: trans.__('Move Cells Up'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.moveUp(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.moveDown, {\n        label: trans.__('Move Cells Down'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.moveDown(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toggleAllLines, {\n        label: trans.__('Toggle All Line Numbers'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.toggleAllLineNumbers(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.commandMode, {\n        label: trans.__('Enter Command Mode'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                current.content.mode = 'command';\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.editMode, {\n        label: trans.__('Enter Edit Mode'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                current.content.mode = 'edit';\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.undoCellAction, {\n        label: trans.__('Undo Cell Operation'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.undo(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.redoCellAction, {\n        label: trans.__('Redo Cell Operation'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.redo(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.changeKernel, {\n        label: trans.__('Change Kernel…'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return sessionDialogs.selectKernel(current.context.sessionContext, translator);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.reconnectToKernel, {\n        label: trans.__('Reconnect To Kernel'),\n        execute: args => {\n            var _a;\n            const current = getCurrent(tracker, shell, args);\n            if (!current) {\n                return;\n            }\n            const kernel = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.reconnect();\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown1, {\n        label: trans.__('Change to Heading 1'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 1);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown2, {\n        label: trans.__('Change to Heading 2'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 2);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown3, {\n        label: trans.__('Change to Heading 3'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 3);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown4, {\n        label: trans.__('Change to Heading 4'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 4);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown5, {\n        label: trans.__('Change to Heading 5'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 5);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.markdown6, {\n        label: trans.__('Change to Heading 6'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.setMarkdownHeader(current.content, 6);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideCode, {\n        label: trans.__('Collapse Selected Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showCode, {\n        label: trans.__('Expand Selected Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideAllCode, {\n        label: trans.__('Collapse All Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideAllCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showAllCode, {\n        label: trans.__('Expand All Code'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showAllCode(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideOutput, {\n        label: trans.__('Collapse Selected Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideOutput(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.showOutput, {\n        label: trans.__('Expand Selected Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showOutput(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.hideAllOutputs, {\n        label: trans.__('Collapse All Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.hideAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toggleRenderSideBySide, {\n        label: trans.__('Render Side-by-side'),\n        execute: args => {\n            Private.renderSideBySide = !Private.renderSideBySide;\n            tracker.forEach(wideget => {\n                if (wideget) {\n                    if (Private.renderSideBySide) {\n                        return NotebookActions.renderSideBySide(wideget.content);\n                    }\n                    else {\n                        return NotebookActions.renderNotSideBySide(wideget.content);\n                    }\n                }\n            });\n            tracker.currentChanged.connect(() => {\n                if (Private.renderSideBySide && tracker.currentWidget) {\n                    return NotebookActions.renderSideBySide(tracker.currentWidget.content);\n                }\n            });\n        },\n        isToggled: () => Private.renderSideBySide,\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.setSideBySideRatio, {\n        label: trans.__('Set side-by-side ratio'),\n        execute: args => {\n            InputDialog.getNumber({\n                title: trans.__('Width of the output in side-by-side mode'),\n                value: 1\n            })\n                .then(result => {\n                if (result.value) {\n                    document.documentElement.style.setProperty('--jp-side-by-side-output-size', `${result.value}fr`);\n                }\n            })\n                .catch(console.error);\n        }\n    });\n    commands.addCommand(CommandIDs.showAllOutputs, {\n        label: trans.__('Expand All Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.showAllOutputs(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.enableOutputScrolling, {\n        label: trans.__('Enable Scrolling for Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.enableOutputScrolling(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.disableOutputScrolling, {\n        label: trans.__('Disable Scrolling for Outputs'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.disableOutputScrolling(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.selectLastRunCell, {\n        label: trans.__('Select current running or last run cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.selectLastRunCell(current.content);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.replaceSelection, {\n        label: trans.__('Replace Selection in Notebook Cell'),\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            const text = args['text'] || '';\n            if (current) {\n                return NotebookActions.replaceSelection(current.content, text);\n            }\n        },\n        isEnabled\n    });\n    commands.addCommand(CommandIDs.toggleCollapseCmd, {\n        label: 'Toggle Collapse Notebook Heading',\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.toggleCurrentHeadingCollapse(current.content);\n            }\n        },\n        isEnabled: isEnabledAndHeadingSelected\n    });\n    commands.addCommand(CommandIDs.collapseAllCmd, {\n        label: 'Collapse All Cells',\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.collapseAll(current.content);\n            }\n        }\n    });\n    commands.addCommand(CommandIDs.expandAllCmd, {\n        label: 'Expand All Headings',\n        execute: args => {\n            const current = getCurrent(tracker, shell, args);\n            if (current) {\n                return NotebookActions.expandAllHeadings(current.content);\n            }\n        }\n    });\n}\n/**\n * Populate the application's command palette with notebook commands.\n */\nfunction populatePalette(palette, translator) {\n    const trans = translator.load('jupyterlab');\n    let category = trans.__('Notebook Operations');\n    [\n        CommandIDs.interrupt,\n        CommandIDs.restart,\n        CommandIDs.restartClear,\n        CommandIDs.restartRunAll,\n        CommandIDs.runAll,\n        CommandIDs.renderAllMarkdown,\n        CommandIDs.runAllAbove,\n        CommandIDs.runAllBelow,\n        CommandIDs.restartAndRunToSelected,\n        CommandIDs.selectAll,\n        CommandIDs.deselectAll,\n        CommandIDs.clearAllOutputs,\n        CommandIDs.toggleAllLines,\n        CommandIDs.editMode,\n        CommandIDs.commandMode,\n        CommandIDs.changeKernel,\n        CommandIDs.reconnectToKernel,\n        CommandIDs.createConsole,\n        CommandIDs.closeAndShutdown,\n        CommandIDs.trust,\n        CommandIDs.toggleCollapseCmd,\n        CommandIDs.collapseAllCmd,\n        CommandIDs.expandAllCmd\n    ].forEach(command => {\n        palette.addItem({ command, category });\n    });\n    palette.addItem({\n        command: CommandIDs.createNew,\n        category,\n        args: { isPalette: true }\n    });\n    category = trans.__('Notebook Cell Operations');\n    [\n        CommandIDs.run,\n        CommandIDs.runAndAdvance,\n        CommandIDs.runAndInsert,\n        CommandIDs.runInConsole,\n        CommandIDs.clearOutputs,\n        CommandIDs.toCode,\n        CommandIDs.toMarkdown,\n        CommandIDs.toRaw,\n        CommandIDs.cut,\n        CommandIDs.copy,\n        CommandIDs.pasteBelow,\n        CommandIDs.pasteAbove,\n        CommandIDs.pasteAndReplace,\n        CommandIDs.deleteCell,\n        CommandIDs.split,\n        CommandIDs.merge,\n        CommandIDs.mergeAbove,\n        CommandIDs.mergeBelow,\n        CommandIDs.insertAbove,\n        CommandIDs.insertBelow,\n        CommandIDs.selectAbove,\n        CommandIDs.selectBelow,\n        CommandIDs.extendAbove,\n        CommandIDs.extendTop,\n        CommandIDs.extendBelow,\n        CommandIDs.extendBottom,\n        CommandIDs.moveDown,\n        CommandIDs.moveUp,\n        CommandIDs.undoCellAction,\n        CommandIDs.redoCellAction,\n        CommandIDs.markdown1,\n        CommandIDs.markdown2,\n        CommandIDs.markdown3,\n        CommandIDs.markdown4,\n        CommandIDs.markdown5,\n        CommandIDs.markdown6,\n        CommandIDs.hideCode,\n        CommandIDs.showCode,\n        CommandIDs.hideAllCode,\n        CommandIDs.showAllCode,\n        CommandIDs.hideOutput,\n        CommandIDs.showOutput,\n        CommandIDs.hideAllOutputs,\n        CommandIDs.showAllOutputs,\n        CommandIDs.toggleRenderSideBySide,\n        CommandIDs.setSideBySideRatio,\n        CommandIDs.enableOutputScrolling,\n        CommandIDs.disableOutputScrolling\n    ].forEach(command => {\n        palette.addItem({ command, category });\n    });\n}\n/**\n * Populates the application menus for the notebook.\n */\nfunction populateMenus(app, mainMenu, tracker, translator, sessionDialogs) {\n    const trans = translator.load('jupyterlab');\n    const { commands } = app;\n    sessionDialogs = sessionDialogs || sessionContextDialogs;\n    // Add undo/redo hooks to the edit menu.\n    mainMenu.editMenu.undoers.add({\n        tracker,\n        undo: widget => {\n            var _a;\n            (_a = widget.content.activeCell) === null || _a === void 0 ? void 0 : _a.editor.undo();\n        },\n        redo: widget => {\n            var _a;\n            (_a = widget.content.activeCell) === null || _a === void 0 ? void 0 : _a.editor.redo();\n        }\n    });\n    // Add a clearer to the edit menu\n    mainMenu.editMenu.clearers.add({\n        tracker,\n        clearCurrentLabel: (n) => trans.__('Clear Output'),\n        clearAllLabel: (n) => {\n            return trans.__('Clear All Outputs');\n        },\n        clearCurrent: (current) => {\n            return NotebookActions.clearOutputs(current.content);\n        },\n        clearAll: (current) => {\n            return NotebookActions.clearAllOutputs(current.content);\n        }\n    });\n    // Add a close and shutdown command to the file menu.\n    mainMenu.fileMenu.closeAndCleaners.add({\n        tracker,\n        closeAndCleanupLabel: (n) => trans.__('Close and Shutdown Notebook'),\n        closeAndCleanup: (current) => {\n            const fileName = current.title.label;\n            return showDialog({\n                title: trans.__('Shut down the Notebook?'),\n                body: trans.__('Are you sure you want to close \"%1\"?', fileName),\n                buttons: [Dialog.cancelButton(), Dialog.warnButton()]\n            }).then(result => {\n                if (result.button.accept) {\n                    return current.context.sessionContext.shutdown().then(() => {\n                        current.dispose();\n                    });\n                }\n            });\n        }\n    });\n    // Add a kernel user to the Kernel menu\n    mainMenu.kernelMenu.kernelUsers.add({\n        tracker,\n        interruptKernel: current => {\n            var _a;\n            const kernel = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.interrupt();\n            }\n            return Promise.resolve(void 0);\n        },\n        reconnectToKernel: current => {\n            var _a;\n            const kernel = (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n            if (kernel) {\n                return kernel.reconnect();\n            }\n            return Promise.resolve(void 0);\n        },\n        restartKernelAndClearLabel: (n) => trans.__('Restart Kernel and Clear All Outputs…'),\n        restartKernel: current => sessionDialogs.restart(current.sessionContext, translator),\n        restartKernelAndClear: current => {\n            return sessionDialogs\n                .restart(current.sessionContext, translator)\n                .then(restarted => {\n                if (restarted) {\n                    NotebookActions.clearAllOutputs(current.content);\n                }\n                return restarted;\n            });\n        },\n        changeKernel: current => sessionDialogs.selectKernel(current.sessionContext, translator),\n        shutdownKernel: current => current.sessionContext.shutdown()\n    });\n    // Add a console creator the the Kernel menu\n    mainMenu.fileMenu.consoleCreators.add({\n        tracker,\n        createConsoleLabel: (n) => trans.__('New Console for Notebook'),\n        createConsole: current => Private.createConsole(commands, current, true)\n    });\n    // Add an IEditorViewer to the application view menu\n    mainMenu.viewMenu.editorViewers.add({\n        tracker,\n        toggleLineNumbers: widget => {\n            NotebookActions.toggleAllLineNumbers(widget.content);\n        },\n        lineNumbersToggled: widget => {\n            const config = widget.content.editorConfig;\n            return !!(config.code.lineNumbers &&\n                config.markdown.lineNumbers &&\n                config.raw.lineNumbers);\n        }\n    });\n    // Add an ICodeRunner to the application run menu\n    mainMenu.runMenu.codeRunners.add({\n        tracker,\n        runLabel: (n) => trans.__('Run Selected Cells'),\n        runAllLabel: (n) => trans.__('Run All Cells'),\n        restartAndRunAllLabel: (n) => trans.__('Restart Kernel and Run All Cells…'),\n        run: current => {\n            const { context, content } = current;\n            return NotebookActions.runAndAdvance(content, context.sessionContext).then(() => void 0);\n        },\n        runAll: current => {\n            const { context, content } = current;\n            return NotebookActions.runAll(content, context.sessionContext).then(() => void 0);\n        },\n        restartAndRunAll: current => {\n            const { context, content } = current;\n            return sessionDialogs\n                .restart(context.sessionContext, translator)\n                .then(restarted => {\n                if (restarted) {\n                    void NotebookActions.runAll(content, context.sessionContext);\n                }\n                return restarted;\n            });\n        }\n    });\n    // Add kernel information to the application help menu.\n    mainMenu.helpMenu.kernelUsers.add({\n        tracker,\n        getKernel: current => { var _a; return (_a = current.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel; }\n    });\n}\n/**\n * A namespace for module private functionality.\n */\nvar Private;\n(function (Private) {\n    /**\n     * Create a console connected with a notebook kernel\n     *\n     * @param commands Commands registry\n     * @param widget Notebook panel\n     * @param activate Should the console be activated\n     */\n    function createConsole(commands, widget, activate) {\n        const options = {\n            path: widget.context.path,\n            preferredLanguage: widget.context.model.defaultKernelLanguage,\n            activate: activate,\n            ref: widget.id,\n            insertMode: 'split-bottom'\n        };\n        return commands.execute('console:create', options);\n    }\n    Private.createConsole = createConsole;\n    /**\n     * Whether there is an active notebook.\n     */\n    function isEnabled(shell, tracker) {\n        return (tracker.currentWidget !== null &&\n            tracker.currentWidget === shell.currentWidget);\n    }\n    Private.isEnabled = isEnabled;\n    /**\n     * Whether there is an notebook active, with a single selected cell.\n     */\n    function isEnabledAndSingleSelected(shell, tracker) {\n        if (!Private.isEnabled(shell, tracker)) {\n            return false;\n        }\n        const { content } = tracker.currentWidget;\n        const index = content.activeCellIndex;\n        // If there are selections that are not the active cell,\n        // this command is confusing, so disable it.\n        for (let i = 0; i < content.widgets.length; ++i) {\n            if (content.isSelected(content.widgets[i]) && i !== index) {\n                return false;\n            }\n        }\n        return true;\n    }\n    Private.isEnabledAndSingleSelected = isEnabledAndSingleSelected;\n    /**\n     * Whether there is an notebook active, with a single selected cell.\n     */\n    function isEnabledAndHeadingSelected(shell, tracker) {\n        if (!Private.isEnabled(shell, tracker)) {\n            return false;\n        }\n        const { content } = tracker.currentWidget;\n        const index = content.activeCellIndex;\n        if (!(content.activeCell instanceof MarkdownCell)) {\n            return false;\n        }\n        // If there are selections that are not the active cell,\n        // this command is confusing, so disable it.\n        for (let i = 0; i < content.widgets.length; ++i) {\n            if (content.isSelected(content.widgets[i]) && i !== index) {\n                return false;\n            }\n        }\n        return true;\n    }\n    Private.isEnabledAndHeadingSelected = isEnabledAndHeadingSelected;\n    /**\n     * The default Export To ... formats and their human readable labels.\n     */\n    function getFormatLabels(translator) {\n        translator = translator || nullTranslator;\n        const trans = translator.load('jupyterlab');\n        return {\n            html: trans.__('HTML'),\n            latex: trans.__('LaTeX'),\n            markdown: trans.__('Markdown'),\n            pdf: trans.__('PDF'),\n            rst: trans.__('ReStructured Text'),\n            script: trans.__('Executable Script'),\n            slides: trans.__('Reveal.js Slides')\n        };\n    }\n    Private.getFormatLabels = getFormatLabels;\n    /**\n     * A widget hosting a cloned output area.\n     */\n    class ClonedOutputArea extends Panel {\n        constructor(options) {\n            super();\n            this._cell = null;\n            const trans = (options.translator || nullTranslator).load('jupyterlab');\n            this._notebook = options.notebook;\n            this._index = options.index !== undefined ? options.index : -1;\n            this._cell = options.cell || null;\n            this.id = `LinkedOutputView-${UUID.uuid4()}`;\n            this.title.label = 'Output View';\n            this.title.icon = notebookIcon;\n            this.title.caption = this._notebook.title.label\n                ? trans.__('For Notebook: %1', this._notebook.title.label)\n                : trans.__('For Notebook:');\n            this.addClass('jp-LinkedOutputView');\n            // Wait for the notebook to be loaded before\n            // cloning the output area.\n            void this._notebook.context.ready.then(() => {\n                if (!this._cell) {\n                    this._cell = this._notebook.content.widgets[this._index];\n                }\n                if (!this._cell || this._cell.model.type !== 'code') {\n                    this.dispose();\n                    return;\n                }\n                const clone = this._cell.cloneOutputArea();\n                this.addWidget(clone);\n            });\n        }\n        /**\n         * The index of the cell in the notebook.\n         */\n        get index() {\n            return this._cell\n                ? ArrayExt.findFirstIndex(this._notebook.content.widgets, c => c === this._cell)\n                : this._index;\n        }\n        /**\n         * The path of the notebook for the cloned output area.\n         */\n        get path() {\n            return this._notebook.context.path;\n        }\n    }\n    Private.ClonedOutputArea = ClonedOutputArea;\n    Private.renderSideBySide = false;\n})(Private || (Private = {}));\n//# sourceMappingURL=index.js.map"],"names":["logNotebookOutput","activate","app","nbtracker","loggerRegistry","registerNB","nb","logOutput","msg","levelNormal","levelError","KernelMessage","logger","getLogger","context","path","rendermime","content","data","Object","assign","output_type","header","msg_type","level","name","log","type","sessionContext","iopubMessage","connect","_","unhandledMessage","forEach","widgetAdded","id","requires","INotebookTracker","optional","ILoggerRegistry","autoStart","CommandIDs","createNew","interrupt","restart","restartClear","restartAndRunToSelected","restartRunAll","reconnectToKernel","changeKernel","createConsole","createOutputView","clearAllOutputs","closeAndShutdown","trust","exportToFormat","run","runAndAdvance","runAndInsert","runInConsole","runAll","runAllAbove","runAllBelow","renderAllMarkdown","toCode","toMarkdown","toRaw","cut","copy","pasteAbove","pasteBelow","pasteAndReplace","moveUp","moveDown","clearOutputs","deleteCell","insertAbove","insertBelow","selectAbove","selectBelow","extendAbove","extendTop","extendBelow","extendBottom","selectAll","deselectAll","editMode","merge","mergeAbove","mergeBelow","split","commandMode","toggleAllLines","undoCellAction","redoCellAction","markdown1","markdown2","markdown3","markdown4","markdown5","markdown6","hideCode","showCode","hideAllCode","showAllCode","hideOutput","showOutput","hideAllOutputs","showAllOutputs","toggleRenderSideBySide","setSideBySideRatio","enableOutputScrolling","disableOutputScrolling","selectLastRunCell","replaceSelection","autoClosingBrackets","toggleCollapseCmd","collapseAllCmd","expandAllCmd","copyToClipboard","FACTORY","FORMAT_EXCLUDE","trackerPlugin","provides","INotebookWidgetFactory","ITranslator","ICommandPalette","IFileBrowserFactory","ILauncher","ILayoutRestorer","IMainMenu","ISettingRegistry","ISessionContextDialogs","factory","translator","palette","browserFactory","launcher","restorer","mainMenu","settingRegistry","sessionDialogs","trans","load","services","serviceManager","commands","tracker","NotebookTracker","namespace","fetchSettings","Promise","reject","Error","then","settings","updateConfig","changed","addCommand","execute","args","_a","codeConfig","get","composite","markdownConfig","rawConfig","anyToggled","toggled","set","label","__","isToggled","some","x","catch","reason","console","warn","message","updateTracker","editorConfig","notebookConfig","kernelShutdown","shutdownOnClose","restore","command","panel","when","ready","registry","docRegistry","modelFactory","NotebookModelFactory","disableDocumentWideUndoRedo","addModelFactory","shell","sessionContextDialogs","isEnabled","Private","isEnabledAndSingleSelected","currentChanged","sender","_b","model","cells","list","cell","widgets","newIndex","MarkdownCell","toggleCollapsedSignal","newCell","collapsing","NotebookActions","notebook","headingCollapsed","activeCell","refreshCellCollapsed","activeCellChanged","current","getCurrent","currentWidget","activeCellIndex","length","fileName","title","showDialog","body","buttons","Dialog","result","button","accept","shutdown","dispose","save","restarted","executed","kernel","session","mode","selectKernel","reconnect","renderSideBySide","wideget","InputDialog","value","document","documentElement","style","setProperty","error","text","isEnabledAndHeadingSelected","addCommands","category","addItem","isPalette","populatePalette","ft","getFileType","options","widget","setConfig","code","StaticNotebook","markdown","raw","scrollPastEnd","defaultCell","recordTiming","numberCellsToRenderDirectly","renderCellOnIdle","observedTopMargin","observedBottomMargin","maxNumberOutputs","widgetCreated","icon","iconClass","iconLabel","pathChanged","add","editMenu","undoers","undo","editor","redo","clearers","clearCurrentLabel","n","clearAllLabel","clearCurrent","clearAll","fileMenu","closeAndCleaners","closeAndCleanupLabel","closeAndCleanup","kernelMenu","kernelUsers","interruptKernel","resolve","restartKernelAndClearLabel","restartKernel","restartKernelAndClear","shutdownKernel","consoleCreators","createConsoleLabel","viewMenu","editorViewers","toggleLineNumbers","lineNumbersToggled","config","lineNumbers","runMenu","codeRunners","runLabel","runAllLabel","restartAndRunAllLabel","restartAndRunAll","helpMenu","getKernel","populateMenus","_c","kernelName","kernelspecs","specs","display_name","caption","undefined","notebookIcon","cwd","defaultBrowser","disposables","onSpecsChanged","DisposableSet","rank","default","Infinity","spec","kernelIconUrl","resources","isLauncher","metadata","JSONExt","specsChanged","NotebookPanel","IEditorServices","editorServices","editorFactory","factoryService","newInlineEditor","tools","state","inspectorProvider","notebookTools","NotebookTools","activeCellTool","slideShow","cellMetadataEditor","collapsed","notebookMetadataEditor","nbconvert","getExportFormats","response","rawFormatExclude","optionValueArray","formatList","keys","formatLabels","getFormatLabels","key","indexOf","altOption","toUpperCase","substr","option","mimeTypeValue","output_mimetype","push","nbConvert","tool","section","buildIcon","MessageLoop","open","remove","register","render","INotebookTools","IStateDB","IPropertyInspectorProvider","commandEditItem","IStatusBar","statusBar","item","CommandEditStatus","registerStatusItem","align","isActive","exportPlugin","exportTo","formatLabel","url","PageConfig","format","download","dirty","readOnly","window","items","find","submenu","capCaseKey","labelStr","notebookTrustItem","tranlator","NotebookTrustStatus","widgetFactoryPlugin","IRenderMimeRegistry","contentFactory","NotebookWidgetFactory","fileTypes","modelName","defaultFor","preferKernel","canStartKernel","mimeTypeService","addWidgetFactory","clonedOutputsPlugin","IDocumentManager","docManager","notebookTracker","clonedOutputs","WidgetTracker","index","restored","async","findWidget","ClonedOutputArea","MainAreaWidget","addSibling","ref","updateCloned","disposed","disconnect","codeConsolePlugin","toJSON","selection","getSelection","start","end","column","line","getOffsetAt","substring","cursor","getCursorPosition","srcLines","curLine","lineCount","replace","fromFirst","firstLine","lastLine","slice","join","reply","requestIsComplete","status","setCursorPosition","insertMode","copyOutputPlugin","output","outputArea","outputTracker","outputAreaAreas","node","getElementsByClassName","e","sel","savedRanges","i","rangeCount","getRangeAt","cloneRange","range","createRange","selectNodeContents","removeAllRanges","addRange","execCommand","r","copyElement","contextMenu","selector","activateById","preferredLanguage","defaultKernelLanguage","isSelected","nullTranslator","html","latex","pdf","rst","script","slides","Panel","constructor","super","this","_cell","_notebook","_index","UUID","addClass","clone","cloneOutputArea","addWidget","ArrayExt","c"],"sourceRoot":""}